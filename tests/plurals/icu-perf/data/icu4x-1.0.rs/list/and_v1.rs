// @generated
type DataStruct = < :: icu :: list :: provider :: AndListV1Marker as :: icu_provider :: DataMarker > :: Yokeable ; pub static DATA : litemap :: LiteMap < & str , & DataStruct , & [(& str , & DataStruct)] > = litemap :: LiteMap :: from_sorted_store_unchecked (& [("af" , AF_AF_NA) , ("af-NA" , AF_AF_NA) , ("agq" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ak" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("am" , AM) , ("ar" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-AE" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-BH" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-DJ" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-DZ" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-EG" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-EH" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-ER" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-IL" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-IQ" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-JO" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-KM" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-KW" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-LB" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-LY" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-MA" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-MR" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-OM" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-PS" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-QA" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-SA" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-SD" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-SO" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-SS" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-SY" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-TD" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-TN" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("ar-YE" , AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH) , ("as" , AS) , ("asa" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ast" , AST) , ("az" , AZ_AZ_LATN) , ("az-Cyrl" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("az-Latn" , AZ_AZ_LATN) , ("bas" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("be" , BE_BE_TARASK) , ("be-tarask" , BE_BE_TARASK) , ("bem" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("bez" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("bg" , BG) , ("bm" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("bn" , BN_BN_IN) , ("bn-IN" , BN_BN_IN) , ("bo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("bo-IN" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("br" , BR) , ("brx" , BRX) , ("bs" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("bs-Cyrl" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("bs-Latn" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("ca" , CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT) , ("ca-AD" , CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT) , ("ca-ES-valencia" , CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT) , ("ca-FR" , CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT) , ("ca-IT" , CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT) , ("ccp" , CCP_CCP_IN) , ("ccp-IN" , CCP_CCP_IN) , ("ce" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ceb" , CEB) , ("cgg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("chr" , CHR) , ("ckb" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ckb-IR" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("cs" , CS) , ("cy" , CY) , ("da" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("da-GL" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("dav" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("de" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-AT" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-BE" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-CH" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-IT" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-LI" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("de-LU" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("dje" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("doi" , DOI) , ("dsb" , DSB_HSB) , ("dua" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("dyo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("dz" , DZ) , ("ebu" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ee" , EE_EE_TG) , ("ee-TG" , EE_EE_TG) , ("el" , EL_EL_CY) , ("el-CY" , EL_EL_CY) , ("en" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-001" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-150" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-AE" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-AG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-AI" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-AS" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-AT" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-AU" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BB" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BI" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-BM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BS" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BW" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-BZ" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CA" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CC" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CH" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CX" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-CY" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-DE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-DG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-DK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-DM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-ER" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-FI" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-FJ" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-FK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-FM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GB" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GD" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GH" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GI" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-GU" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-GY" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-HK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-IE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-IL" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-IM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-IN" , EN_IN) , ("en-IO" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-JE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-JM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-KE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-KI" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-KN" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-KY" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-LC" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-LR" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-LS" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MH" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-MO" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MP" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-MS" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MT" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MU" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MV" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MW" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-MY" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NA" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NF" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NL" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NR" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NU" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-NZ" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-PG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-PH" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-PK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-PN" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-PR" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-PW" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-RW" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SB" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SC" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SD" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SE" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SH" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SI" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SL" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SS" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SX" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-SZ" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TC" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TK" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TO" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TT" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TV" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-TZ" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-UG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-UM" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-VC" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-VG" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-VI" , EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP) , ("en-VU" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-WS" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-ZA" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-ZM" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("en-ZW" , EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU) , ("eo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("es" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-419" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-AR" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-BO" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-BR" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-BZ" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-CL" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-CO" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-CR" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-CU" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-DO" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-EA" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-EC" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-GQ" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-GT" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-HN" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-IC" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-MX" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-NI" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-PA" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-PE" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-PH" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-PR" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-PY" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-SV" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-US" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-UY" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("es-VE" , ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL) , ("et" , ET) , ("eu" , EU) , ("ewo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("fa" , FA_FA_AF) , ("fa-AF" , FA_FA_AF) , ("ff" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Adlm" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-BF" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-CM" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GH" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GM" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GW" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-LR" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-MR" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-NE" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-NG" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-SL" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-SN" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Latn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-BF" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-CM" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-GH" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-GM" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-GN" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-GW" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-LR" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-MR" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-NE" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-NG" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ff-Latn-SL" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("fi" , FI_SE_SE_FI_SE_SE) , ("fil" , FIL) , ("fo" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("fo-DK" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("fr" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-BE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-BF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-BI" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-BJ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-BL" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CA" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CD" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CH" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CI" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-CM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-DJ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-DZ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-GA" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-GF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-GN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-GP" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-GQ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-HT" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-KM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-LU" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MA" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-ML" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MQ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MR" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-MU" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-NC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-NE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-PF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-PM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-RE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-RW" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-SC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-SN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-SY" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-TD" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-TG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-TN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-VU" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-WF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fr-YT" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA) , ("fur" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("fy" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("ga" , GA_GA_GB) , ("ga-GB" , GA_GA_GB) , ("gd" , GD) , ("gl" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("gsw" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("gsw-FR" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("gsw-LI" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("gu" , GU) , ("guz" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("gv" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ha" , HA_HA_GH_HA_NE) , ("ha-GH" , HA_HA_GH_HA_NE) , ("ha-NE" , HA_HA_GH_HA_NE) , ("haw" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("he" , HE) , ("hi" , HI) , ("hi-Latn" , HI_LATN) , ("hr" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("hr-BA" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("hsb" , DSB_HSB) , ("hu" , HU) , ("hy" , HY) , ("ia" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("id" , ID) , ("ig" , IG) , ("ii" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("is" , IS) , ("it" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("it-CH" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("it-SM" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("it-VA" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("ja" , JA) , ("jgo" , JGO) , ("jmc" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("jv" , JV) , ("ka" , KA) , ("kab" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kam" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kde" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kea" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("kgp" , KGP) , ("khq" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ki" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kk" , KK) , ("kkj" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kl" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("kln" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("km" , KM) , ("kn" , KN) , ("ko" , KO_KO_KP) , ("ko-KP" , KO_KO_KP) , ("kok" , KOK) , ("ks" , KS_KS_ARAB) , ("ks-Arab" , KS_KS_ARAB) , ("ks-Deva" , KS_DEVA) , ("ksb" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ksf" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ksh" , KSH_LV) , ("ku" , KU) , ("kw" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ky" , KY) , ("lag" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lb" , LB) , ("lg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lkt" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ln" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ln-AO" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ln-CF" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ln-CG" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lo" , LO) , ("lrc" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lrc-IQ" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lt" , LT) , ("lu" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("luo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("luy" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("lv" , KSH_LV) , ("mai" , MAI) , ("mas" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mas-TZ" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mer" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mfe" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mgh" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mgo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mi" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mk" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("ml" , ML) , ("mn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("mni" , MNI_MNI_BENG) , ("mni-Beng" , MNI_MNI_BENG) , ("mr" , MR) , ("ms" , MS_MS_BN_MS_ID_MS_SG) , ("ms-BN" , MS_MS_BN_MS_ID_MS_SG) , ("ms-ID" , MS_MS_BN_MS_ID_MS_SG) , ("ms-SG" , MS_MS_BN_MS_ID_MS_SG) , ("mt" , MT) , ("mua" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("my" , MY) , ("mzn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("naq" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("nb" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("nb-SJ" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("nd" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("nds" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("nds-NL" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ne" , NE_NE_IN) , ("ne-IN" , NE_NE_IN) , ("nl" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-AW" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-BE" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-BQ" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-CW" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-SR" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nl-SX" , FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR) , ("nmg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("nn" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("nnh" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("no" , DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO) , ("nus" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("nyn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("om" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("om-KE" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("or" , OR) , ("os" , OS_OS_RU) , ("os-RU" , OS_OS_RU) , ("pa" , PA_PA_GURU) , ("pa-Arab" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("pa-Guru" , PA_PA_GURU) , ("pcm" , PCM) , ("pl" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("ps" , PS_PS_PK) , ("ps-PK" , PS_PS_PK) , ("pt" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-AO" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-CH" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-CV" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-GQ" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-GW" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-LU" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-MO" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-MZ" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-PT" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-ST" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("pt-TL" , PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU) , ("qu" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("qu-BO" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("qu-EC" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("rm" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("rn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ro" , RO_RO_MD) , ("ro-MD" , RO_RO_MD) , ("rof" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ru" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("ru-BY" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("ru-KG" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("ru-KZ" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("ru-MD" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("ru-UA" , RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA) , ("rw" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("rwk" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sa" , SA) , ("sah" , SAH) , ("saq" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sat" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sat-Olck" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sbp" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sc" , FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC) , ("sd" , SD_SD_ARAB) , ("sd-Arab" , SD_SD_ARAB) , ("sd-Deva" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("se" , FI_SE_SE_FI_SE_SE) , ("se-FI" , FI_SE_SE_FI_SE_SE) , ("se-SE" , FI_SE_SE_FI_SE_SE) , ("seh" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ses" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("shi" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("shi-Latn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("shi-Tfng" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("si" , SI) , ("sk" , SK) , ("sl" , SL) , ("smn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("sn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("so" , SO_SO_DJ_SO_ET_SO_KE) , ("so-DJ" , SO_SO_DJ_SO_ET_SO_KE) , ("so-ET" , SO_SO_DJ_SO_ET_SO_KE) , ("so-KE" , SO_SO_DJ_SO_ET_SO_KE) , ("sq" , SQ_SQ_MK_SQ_XK) , ("sq-MK" , SQ_SQ_MK_SQ_XK) , ("sq-XK" , SQ_SQ_MK_SQ_XK) , ("sr" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("sr-Cyrl" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("sr-Cyrl-BA" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("sr-Cyrl-ME" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("sr-Cyrl-XK" , BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME) , ("sr-Latn" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("sr-Latn-BA" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("sr-Latn-ME" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("sr-Latn-XK" , BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA) , ("su" , SU_SU_LATN) , ("su-Latn" , SU_SU_LATN) , ("sv" , SV_SV_AX_SV_FI) , ("sv-AX" , SV_SV_AX_SV_FI) , ("sv-FI" , SV_SV_AX_SV_FI) , ("sw" , SW_SW_CD_SW_KE_SW_UG) , ("sw-CD" , SW_SW_CD_SW_KE_SW_UG) , ("sw-KE" , SW_SW_CD_SW_KE_SW_UG) , ("sw-UG" , SW_SW_CD_SW_KE_SW_UG) , ("ta" , TA_TA_LK_TA_MY_TA_SG) , ("ta-LK" , TA_TA_LK_TA_MY_TA_SG) , ("ta-MY" , TA_TA_LK_TA_MY_TA_SG) , ("ta-SG" , TA_TA_LK_TA_MY_TA_SG) , ("te" , TE) , ("teo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("teo-KE" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("tg" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("th" , TH) , ("ti" , TI_TI_ER) , ("ti-ER" , TI_TI_ER) , ("tk" , TK) , ("to" , TO) , ("tr" , TR_TR_CY) , ("tr-CY" , TR_TR_CY) , ("tt" , TT) , ("twq" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("tzm" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ug" , UG) , ("uk" , UK) , ("und" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("ur" , UR_UR_IN) , ("ur-IN" , UR_UR_IN) , ("uz" , UZ_UZ_LATN) , ("uz-Arab" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("uz-Cyrl" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("uz-Latn" , UZ_UZ_LATN) , ("vai" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("vai-Latn" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("vai-Vaii" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("vi" , VI) , ("vun" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("wae" , DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU) , ("wo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("xh" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("xog" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("yav" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("yi" , YI) , ("yo" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("yo-BJ" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("yrl" , YRL_YRL_CO_YRL_VE) , ("yrl-CO" , YRL_YRL_CO_YRL_VE) , ("yrl-VE" , YRL_YRL_CO_YRL_VE) , ("yue" , YUE_YUE_HANS_YUE_HANT) , ("yue-Hans" , YUE_YUE_HANS_YUE_HANT) , ("yue-Hant" , YUE_YUE_HANS_YUE_HANT) , ("zgh" , AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO) , ("zh" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hans" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hans-HK" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hans-MO" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hans-SG" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hant" , ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG) , ("zh-Hant-HK" , ZH_HANT_HK_ZH_HANT_MO) , ("zh-Hant-MO" , ZH_HANT_HK_ZH_HANT_MO) , ("zu" , ZU)]) ; static AF_AF_NA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } ,] ,) ; static AGQ_AK_ASA_AZ_CYRL_BAS_BEM_BEZ_BM_BO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static AM : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", እና " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" እና " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", እና " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" እና " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", እና " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" እና " , 8u8) } , special_case : None , } ,] ,) ; static AR_AR_AE_AR_BH_AR_DJ_AR_DZ_AR_EG_AR_EH : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و" , 3u8) } , special_case : None , } ,] ,) ; static AS : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" আৰ\u{9c1} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" আৰ\u{9c1} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" আৰ\u{9c1} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" আৰ\u{9c1} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static AST : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : None , } ,] ,) ; static AZ_AZ_LATN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" və " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" və " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" və " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" və " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static BE_BE_TARASK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } ,] ,) ; static BG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static BN_BN_IN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" এবং " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" এবং " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" এবং " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" এবং " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static BR : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ha " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ha " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } ,] ,) ; static BRX : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", आरो " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आरो " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", आरो " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आरो " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", आरो " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आरो " , 11u8) } , special_case : None , } ,] ,) ; static BS_BS_LATN_HR_HR_BA_KEA_PL_SR_LATN_SR_LATN_BA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } ,] ,) ; static BS_CYRL_MK_SR_SR_CYRL_SR_CYRL_BA_SR_CYRL_ME : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } ,] ,) ; static CA_CA_AD_CA_ES_VALENCIA_CA_FR_CA_IT : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" i " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static CCP_CCP_IN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𑄃\u{11133}𑄃 " , 14u8) } , special_case : None , } ,] ,) ; static CEB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ug " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ug " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ug " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ug " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static CHR : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ᎠᎴ " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ᎠᎴ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", & " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", & " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static CS : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static CY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", a(c) " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(c) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", a(c) " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(c) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static DA_DA_GL_FO_FO_DK_NB_NB_SJ_NN_NO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } ,] ,) ; static DE_DE_AT_DE_BE_DE_CH_DE_IT_DE_LI_DE_LU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" und " , 5u8) } , special_case : None , } ,] ,) ; static DOI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", त\u{947} " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" त\u{947} " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", त\u{947} " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" त\u{947} " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", त\u{947} " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" त\u{947} " , 8u8) } , special_case : None , } ,] ,) ; static DSB_HSB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } ,] ,) ; static DZ : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" དང་ " , 11u8) } , special_case : None , } ,] ,) ; static EE_EE_TG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", kple " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kple " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", kple " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kple " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", kple " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kple " , 6u8) } , special_case : None , } ,] ,) ; static EL_EL_CY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" και " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" και " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" και " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" και " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static EN_001_EN_150_EN_AG_EN_AI_EN_AT_EN_AU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static EN_EN_AE_EN_AS_EN_BI_EN_GU_EN_MH_EN_MP : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", and " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", & " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static EN_IN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", and " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static ES_ES_419_ES_AR_ES_BO_ES_BR_ES_BZ_ES_CL : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" y " , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 2u8 , 2u8 , 2u8 , 3u8 , 4u8 , 4u8 , 5u8 , 6u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 7u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 11u8 , 11u8 , 12u8 , 13u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 16u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 17u8 , 18u8 , 18u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 19u8 , 20u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 21u8 , 22u8 , 23u8 , 23u8 , 24u8 , 25u8 , 25u8 , 25u8 , 26u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 27u8 , 40u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 5u8 , 5u8 , 6u8 , 6u8 , 12u8 , 12u8 , 13u8 , 13u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 83u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 27u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 3u8 , 0u8 , 6u8 , 6u8 , 13u8 , 13u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 104u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 2u8 , 2u8 , 4u8 , 7u8 , 9u8 , 9u8 , 11u8 , 14u8 , 19u8 , 19u8 , 20u8 , 20u8 , 21u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 206u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 236u8 , 0u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 251u8 , 0u8 , 0u8 , 0u8 , 10u8 , 1u8 , 0u8 , 0u8 , 25u8 , 1u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 68u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 17u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 16u8 , 0u8 , 0u8 , 191u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 16u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 17u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 15u8 , 15u8 , 0u8 , 0u8 , 221u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , }) , } ,] ,) ; static ET : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static EU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" eta " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" eta " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" eta " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" eta " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static FA_FA_AF : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، و " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، و " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" و " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("،\u{200f} " , 6u8) } , special_case : None , } ,] ,) ; static FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 𞤫 " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ & " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("⹁ " , 4u8) } , special_case : None , } ,] ,) ; static FIL : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", at " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" at " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", at " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" at " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static FI_SE_SE_FI_SE_SE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ja " , 4u8) } , special_case : None , } ,] ,) ; static FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" et " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" et " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" et " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" et " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static FUR_GL_IA_IT_IT_CH_IT_SM_IT_VA_RM_SC : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } ,] ,) ; static FY_NL_NL_AW_NL_BE_NL_BQ_NL_CW_NL_SR : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" en " , 4u8) } , special_case : None , } ,] ,) ; static GA_GA_GB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static GD : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" agus " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ⁊ " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ⁊ " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static GU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" અન\u{ac7} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" અન\u{ac7} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" અન\u{ac7} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" અન\u{ac7} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static HA_HA_GH_HA_NE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", da " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" da " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", da " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" da " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", da " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" da " , 4u8) } , special_case : None , } ,] ,) ; static HE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו" , 3u8) } , special_case : Some (:: icu :: list :: provider :: SpecialCasePattern { condition : unsafe { :: icu :: list :: provider :: StringMatcher :: from_dfa_bytes_unchecked (& [114u8 , 117u8 , 115u8 , 116u8 , 45u8 , 114u8 , 101u8 , 103u8 , 101u8 , 120u8 , 45u8 , 97u8 , 117u8 , 116u8 , 111u8 , 109u8 , 97u8 , 116u8 , 97u8 , 45u8 , 100u8 , 102u8 , 97u8 , 45u8 , 115u8 , 112u8 , 97u8 , 114u8 , 115u8 , 101u8 , 0u8 , 0u8 , 255u8 , 254u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 17u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 2u8 , 3u8 , 3u8 , 4u8 , 5u8 , 5u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 6u8 , 7u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 8u8 , 9u8 , 9u8 , 9u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 10u8 , 11u8 , 12u8 , 13u8 , 14u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 15u8 , 16u8 , 16u8 , 17u8 , 18u8 , 18u8 , 18u8 , 18u8 , 18u8 , 19u8 , 20u8 , 21u8 , 22u8 , 22u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 23u8 , 24u8 , 25u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 26u8 , 27u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 28u8 , 29u8 , 30u8 , 31u8 , 32u8 , 33u8 , 33u8 , 33u8 , 34u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 35u8 , 121u8 , 1u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 128u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 14u8 , 0u8 , 0u8 , 0u8 , 23u8 , 23u8 , 24u8 , 24u8 , 25u8 , 25u8 , 26u8 , 26u8 , 27u8 , 27u8 , 28u8 , 28u8 , 29u8 , 29u8 , 30u8 , 30u8 , 31u8 , 31u8 , 32u8 , 32u8 , 33u8 , 33u8 , 34u8 , 34u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 137u8 , 0u8 , 0u8 , 0u8 , 152u8 , 0u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 179u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 209u8 , 0u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 224u8 , 0u8 , 0u8 , 0u8 , 1u8 , 1u8 , 0u8 , 0u8 , 16u8 , 1u8 , 0u8 , 0u8 , 31u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 7u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 6u8 , 6u8 , 11u8 , 14u8 , 16u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 10u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 9u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 11u8 , 12u8 , 12u8 , 13u8 , 13u8 , 14u8 , 21u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 46u8 , 1u8 , 0u8 , 0u8 , 79u8 , 1u8 , 0u8 , 0u8 , 122u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 7u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 21u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 1u8 , 6u8 , 0u8 , 0u8 , 194u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 5u8 , 0u8 , 1u8 , 8u8 , 17u8 , 17u8 , 19u8 , 19u8 , 21u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 2u8 , 2u8 , 4u8 , 4u8 , 7u8 , 21u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 106u8 , 1u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 2u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 4u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 9u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 18u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 , 35u8 , 0u8 , 0u8 , 0u8 ,]) } , pattern : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ו-" , 4u8) } , }) , } ,] ,) ; static HI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", और " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } ,] ,) ; static HI_LATN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", aur " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" aur " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" aur " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" aur " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" aur " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" aur " , 5u8) } , special_case : None , } ,] ,) ; static HU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" és " , 5u8) } , special_case : None , } ,] ,) ; static HY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" և " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" և " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" և " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" և " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static ID : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", dan " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", dan " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static IG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", na " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", na " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", na " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static IS : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" og " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static JA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } ,] ,) ; static JGO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ḿbɛn ŋ\u{301}gɛ " , 18u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" pɔp " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ḿbɛn ŋ\u{301}gɛ " , 18u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" pɔp " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ŋ\u{301}gɛ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ḿbɛn ŋ\u{301}gɛ " , 18u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" pɔp " , 6u8) } , special_case : None , } ,] ,) ; static JV : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", lan " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" lan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", lan " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" lan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static KA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" და " , 8u8) } , special_case : None , } ,] ,) ; static KGP : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kar " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kar " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kar " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" kar " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static KK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" және " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" және " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" және " , 10u8) } , special_case : None , } ,] ,) ; static KM : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ន\u{17b7}ង " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ន\u{17b7}ង\u{200b}" , 13u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ន\u{17b7}ង " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ន\u{17b7}ង " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static KN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ಮತ\u{ccd}ತು " , 18u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ಮತ\u{ccd}ತು " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ಮತ\u{ccd}ತು " , 18u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ಮತ\u{ccd}ತು " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static KOK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", & " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static KO_KO_KP : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" 및 " , 5u8) } , special_case : None , } ,] ,) ; static KSH_LV : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" un " , 4u8) } , special_case : None , } ,] ,) ; static KS_DEVA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ति " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ति " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ति " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ति " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ति " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ति " , 8u8) } , special_case : None , } ,] ,) ; static KS_KS_ARAB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، ت\u{655}ہ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ت\u{655}ہ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، ت\u{655}ہ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ت\u{655}ہ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، ت\u{655}ہ " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ت\u{655}ہ " , 8u8) } , special_case : None , } ,] ,) ; static KU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" û " , 4u8) } , special_case : None , } ,] ,) ; static KY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" жана " , 10u8) } , special_case : None , } ,] ,) ; static LB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a(n) " , 6u8) } , special_case : None , } ,] ,) ; static LO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ແລະ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ແລະ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ແລະ " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ແລະ " , 11u8) } , special_case : None , } ,] ,) ; static LT : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ir " , 4u8) } , special_case : None , } ,] ,) ; static MAI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", और " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", और " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", और " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" और " , 8u8) } , special_case : None , } ,] ,) ; static ML : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (",  എന\u{d4d}നിവ" , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ക\u{d42}ട\u{d3e}തെ " , 20u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (",  എന\u{d4d}നിവ" , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ക\u{d42}ട\u{d3e}തെ " , 20u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (",  എന\u{d4d}നിവ" , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (",  എന\u{d4d}നിവ" , 2u8) } , special_case : None , } ,] ,) ; static MNI_MNI_BENG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" অমস\u{9c1}ং " , 17u8) } , special_case : None , } ,] ,) ; static MR : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" आणि " , 11u8) } , special_case : None , } ,] ,) ; static MS_MS_BN_MS_ID_MS_SG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dan " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static MT : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", u " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" u " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", u " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" u " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", u " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" u " , 3u8) } , special_case : None , } ,] ,) ; static MY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" - " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("န\u{103e}င\u{1037}\u{103a} " , 16u8) } , special_case : None , } ,] ,) ; static NE_NE_IN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("," , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" र " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" र " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("," , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" र " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" र " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("," , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static OR : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ଓ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ଓ " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ଓ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ଓ " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ଓ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ଓ " , 5u8) } , special_case : None , } ,] ,) ; static OS_OS_RU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ӕмӕ " , 8u8) } , special_case : None , } ,] ,) ; static PA_PA_GURU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ਅਤ\u{a47} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ਅਤ\u{a47} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ਅਤ\u{a47} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ਅਤ\u{a47} " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static PCM : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", an " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" an " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", & " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ọ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static PS_PS_PK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، او " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" او " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، او " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" او " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، او " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } ,] ,) ; static PT_PT_AO_PT_CH_PT_CV_PT_GQ_PT_GW_PT_LU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" e " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static RO_RO_MD : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" și " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" și " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" și " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" și " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static RU_RU_BY_RU_KG_RU_KZ_RU_MD_RU_UA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" и " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static SA : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", तथा " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" तथा " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", तथा " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" तथा " , 11u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", तथा " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" तथा " , 11u8) } , special_case : None , } ,] ,) ; static SAH : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" уонна " , 12u8) } , special_case : None , } ,] ,) ; static SD_SD_ARAB : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، ۽ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ۽ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، ۽ " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ۽ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static SI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", සහ " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" සහ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", සහ " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" සහ " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", සහ " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" සහ " , 8u8) } , special_case : None , } ,] ,) ; static SK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a\u{a0}" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a\u{a0}" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" a\u{a0}" , 4u8) } , special_case : None , } ,] ,) ; static SL : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" in " , 4u8) } , special_case : None , } ,] ,) ; static SO_SO_DJ_SO_ET_SO_KE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" iyo " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" iyo " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" & " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static SQ_SQ_MK_SQ_XK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" dhe " , 5u8) } , special_case : None , } ,] ,) ; static SU_SU_LATN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", sareng " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" sareng " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", sareng " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" sareng " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", sareng " , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" sareng " , 8u8) } , special_case : None , } ,] ,) ; static SV_SV_AX_SV_FI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" och " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" och " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" och " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" och " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static SW_SW_CD_SW_KE_SW_UG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" na " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static TA_TA_LK_TA_MY_TA_SG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" மற\u{bcd}றும\u{bcd} " , 23u8) } , special_case : None , } ,] ,) ; static TE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" మర\u{c3f}యు " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" మర\u{c3f}యు " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" మర\u{c3f}యు " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" మర\u{c3f}యు " , 17u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static TH : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" และ" , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("และ" , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" และ" , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("และ" , 9u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" " , 1u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" และ" , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("และ" , 9u8) } , special_case : None , } ,] ,) ; static TI_TI_ER : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("፣ " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("ን ን" , 4u8) } , special_case : None , } ,] ,) ; static TK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" we " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" we " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" we " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" we " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static TO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" mo " , 4u8) } , special_case : None , } ,] ,) ; static TR_TR_CY : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ve " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ve " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ve " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ve " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static TT : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" һәм " , 8u8) } , special_case : None , } ,] ,) ; static UG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", and " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", and " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", and " , 6u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" and " , 5u8) } , special_case : None , } ,] ,) ; static UK : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" і " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static UR_UR_IN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، اور " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" اور " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، اور " , 10u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" اور " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("، " , 3u8) } , special_case : None , } ,] ,) ; static UZ_UZ_LATN : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" va " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" va " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" va " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" va " , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static VI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" và " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" và " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" và " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" và " , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static YI : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" און " , 8u8) } , special_case : None , } ,] ,) ; static YRL_YRL_CO_YRL_VE : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" asuí " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" asuí " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" asuí " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" asuí " , 7u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ; static YUE_YUE_HANS_YUE_HANT : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("同" , 3u8) } , special_case : None , } ,] ,) ; static ZH_HANT_HK_ZH_HANT_MO : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("及" , 3u8) } , special_case : None , } ,] ,) ; static ZH_ZH_HANS_ZH_HANS_HK_ZH_HANS_MO_ZH_HANS_SG : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("、" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked ("和" , 3u8) } , special_case : None , } ,] ,) ; static ZU : & DataStruct = & :: icu :: list :: provider :: ListFormatterPatternsV1 ([:: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ne-" , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ne-" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", ne-" , 5u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (" ne-" , 4u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } , :: icu :: list :: provider :: ConditionalListJoinerPattern { default : unsafe { :: icu :: list :: provider :: ListJoinerPattern :: from_parts_unchecked (", " , 2u8) } , special_case : None , } ,] ,) ;
