// @generated
# ! [allow (clippy :: octal_escapes)] type DataStruct = < :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker as :: icu_provider :: DataMarker > :: Yokeable ; pub fn lookup (locale : & icu_provider :: DataLocale) -> Option < & 'static DataStruct > { static KEYS : [& str ; 96usize] = ["af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "chr" , "cs" , "cy" , "da" , "de" , "dsb" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "ga" , "gd" , "gl" , "gu" , "ha" , "he" , "hi" , "hi-Latn" , "hr" , "hsb" , "hu" , "hy" , "id" , "ig" , "is" , "it" , "ja" , "jv" , "ka" , "kk" , "km" , "kn" , "ko" , "kok" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mr" , "ms" , "my" , "ne" , "nl" , "nn" , "no" , "or" , "pa" , "pcm" , "pl" , "ps" , "pt" , "ro" , "ru" , "sd" , "si" , "sk" , "sl" , "so" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tr" , "uk" , "und" , "ur" , "uz" , "vi" , "yo" , "yue" , "yue-Hans" , "zh" , "zh-Hant" , "zu"] ; static DATA : [& DataStruct ; 96usizebinary_search_by (| k | locale . strict_cmp (k . as_bytes ()) . reverse ()) . ok () . map (| i | unsafe { * DATA . get_unchecked (i) }) } static AF : DataStruct = include ! ("af.rs.data") ; static AM : DataStruct = include ! ("am.rs.data") ; static AR : DataStruct = include ! ("ar.rs.data") ; static AS : DataStruct = include ! ("as.rs.data") ; static BN : DataStruct = include ! ("bn.rs.data") ; static BS : DataStruct = include ! ("bs.rs.data") ; static CHR : DataStruct = include ! ("chr.rs.data") ; static CS : DataStruct = include ! ("cs.rs.data") ; static DA : DataStruct = include ! ("da.rs.data") ; static DE : DataStruct = include ! ("de.rs.data") ; static EN : DataStruct = include ! ("en.rs.data") ; static EU : DataStruct = include ! ("eu.rs.data") ; static GA : DataStruct = include ! ("ga.rs.data") ; static HI_LATN : DataStruct = include ! ("hi-Latn.rs.data") ; static HI : DataStruct = include ! ("hi.rs.data") ; static ID : DataStruct = include ! ("id.rs.data") ; static JA : DataStruct = include ! ("ja.rs.data") ; static KK : DataStruct = include ! ("kk.rs.data") ; static MS : DataStruct = include ! ("ms.rs.data") ; static NN : DataStruct = include ! ("nn.rs.data") ; static OR : DataStruct = include ! ("or.rs.data") ; static PT : DataStruct = include ! ("pt.rs.data") ; static SD : DataStruct = include ! ("sd.rs.data") ; static SK : DataStruct = include ! ("sk.rs.data") ; static SO : DataStruct = include ! ("so.rs.data") ; static SV : DataStruct = include ! ("sv.rs.data") ; static VI : DataStruct = include ! ("vi.rs.data") ; static ZH_HANT : DataStruct = include ! ("zh-Hant.rs.data") ;