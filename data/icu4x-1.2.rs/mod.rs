// @generated
mod calendar ; mod collator ; mod datetime ; mod decimal ; mod fallback ; mod list ; mod locid_transform ; mod normalizer ; mod plurals ; mod propnames ; mod props ; mod segmenter ; mod time_zone ; use :: icu_provider :: prelude :: * ; # [doc = r" Implement [`DataProvider<M>`] on the given struct using the data"] # [doc = r" hardcoded in this module. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc = r""] # [doc = r" This macro can only be called from its definition-site, i.e. right"] # [doc = r" after `include!`-ing the generated module."] # [doc = r""] # [doc = r" ```compile_fail"] # [doc = r" struct MyDataProvider;"] # [doc = r#" include!("/path/to/generated/mod.rs");"#] # [doc = r" impl_data_provider(MyDataProvider);"] # [doc = r" ```"] # [allow (unused_macros)] macro_rules ! impl_data_provider { ($ provider : path) => { impl DataProvider < :: icu::calendar :: provider :: JapaneseErasV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::calendar :: provider :: JapaneseErasV1Marker > , DataError > { calendar :: japanese_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::calendar :: provider :: JapaneseErasV1Marker :: KEY , req)) } } impl DataProvider < :: icu::calendar :: provider :: JapaneseExtendedErasV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::calendar :: provider :: JapaneseExtendedErasV1Marker > , DataError > { calendar :: japanext_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::calendar :: provider :: JapaneseExtendedErasV1Marker :: KEY , req)) } } impl DataProvider < :: icu::calendar :: provider :: WeekDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::calendar :: provider :: WeekDataV1Marker > , DataError > { datetime :: week_data_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::calendar :: provider :: WeekDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationDataV1Marker > , DataError > { collator :: data_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationDiacriticsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationDiacriticsV1Marker > , DataError > { collator :: dia_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationDiacriticsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationJamoV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationJamoV1Marker > , DataError > { collator :: jamo_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationJamoV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationMetadataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationMetadataV1Marker > , DataError > { collator :: meta_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationMetadataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationReorderingV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationReorderingV1Marker > , DataError > { collator :: reord_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationReorderingV1Marker :: KEY , req)) } } impl DataProvider < :: icu::collator :: provider :: CollationSpecialPrimariesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::collator :: provider :: CollationSpecialPrimariesV1Marker > , DataError > { collator :: prim_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::collator :: provider :: CollationSpecialPrimariesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker > , DataError > { datetime :: buddhist :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker > , DataError > { datetime :: buddhist :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: CopticDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: CopticDateLengthsV1Marker > , DataError > { datetime :: coptic :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: CopticDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: CopticDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: CopticDateSymbolsV1Marker > , DataError > { datetime :: coptic :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: CopticDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker > , DataError > { datetime :: ethiopic :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker > , DataError > { datetime :: ethiopic :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: GregorianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: GregorianDateLengthsV1Marker > , DataError > { datetime :: gregory :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: GregorianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker > , DataError > { datetime :: gregory :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: IndianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: IndianDateLengthsV1Marker > , DataError > { datetime :: indian :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: IndianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: IndianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: IndianDateSymbolsV1Marker > , DataError > { datetime :: indian :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: IndianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker > , DataError > { datetime :: japanese :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker > , DataError > { datetime :: japanese :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker > , DataError > { datetime :: japanext :: datelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker > , DataError > { datetime :: japanext :: datesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: TimeLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: TimeLengthsV1Marker > , DataError > { datetime :: timelengths_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: TimeLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: calendar :: TimeSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: calendar :: TimeSymbolsV1Marker > , DataError > { datetime :: timesymbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: calendar :: TimeSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: ExemplarCitiesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: ExemplarCitiesV1Marker > , DataError > { time_zone :: exemplar_cities_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: ExemplarCitiesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker > , DataError > { time_zone :: generic_long_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker > , DataError > { time_zone :: generic_short_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker > , DataError > { time_zone :: specific_long_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker > , DataError > { time_zone :: specific_short_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker :: KEY , req)) } } impl DataProvider < :: icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > , DataError > { time_zone :: formats_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::decimal :: provider :: DecimalSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::decimal :: provider :: DecimalSymbolsV1Marker > , DataError > { decimal :: symbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::decimal :: provider :: DecimalSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::list :: provider :: AndListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::list :: provider :: AndListV1Marker > , DataError > { list :: and_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::list :: provider :: AndListV1Marker :: KEY , req)) } } impl DataProvider < :: icu::list :: provider :: OrListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::list :: provider :: OrListV1Marker > , DataError > { list :: or_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::list :: provider :: OrListV1Marker :: KEY , req)) } } impl DataProvider < :: icu::list :: provider :: UnitListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::list :: provider :: UnitListV1Marker > , DataError > { list :: unit_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::list :: provider :: UnitListV1Marker :: KEY , req)) } } impl DataProvider < :: icu::locid_transform :: provider :: AliasesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::locid_transform :: provider :: AliasesV1Marker > , DataError > { locid_transform :: aliases_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::locid_transform :: provider :: AliasesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::locid_transform :: provider :: LikelySubtagsExtendedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::locid_transform :: provider :: LikelySubtagsExtendedV1Marker > , DataError > { locid_transform :: likelysubtags_ext_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::locid_transform :: provider :: LikelySubtagsExtendedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::locid_transform :: provider :: LikelySubtagsForLanguageV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::locid_transform :: provider :: LikelySubtagsForLanguageV1Marker > , DataError > { locid_transform :: likelysubtags_l_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::locid_transform :: provider :: LikelySubtagsForLanguageV1Marker :: KEY , req)) } } impl DataProvider < :: icu::locid_transform :: provider :: LikelySubtagsForScriptRegionV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::locid_transform :: provider :: LikelySubtagsForScriptRegionV1Marker > , DataError > { locid_transform :: likelysubtags_sr_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::locid_transform :: provider :: LikelySubtagsForScriptRegionV1Marker :: KEY , req)) } } impl DataProvider < :: icu::locid_transform :: provider :: LikelySubtagsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::locid_transform :: provider :: LikelySubtagsV1Marker > , DataError > { locid_transform :: likelysubtags_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::locid_transform :: provider :: LikelySubtagsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: CanonicalCompositionsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: CanonicalCompositionsV1Marker > , DataError > { normalizer :: comp_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: CanonicalCompositionsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: CanonicalDecompositionDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: CanonicalDecompositionDataV1Marker > , DataError > { normalizer :: nfd_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: CanonicalDecompositionDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: CanonicalDecompositionTablesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: CanonicalDecompositionTablesV1Marker > , DataError > { normalizer :: nfdex_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: CanonicalDecompositionTablesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker > , DataError > { normalizer :: nfkd_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: CompatibilityDecompositionTablesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: CompatibilityDecompositionTablesV1Marker > , DataError > { normalizer :: nfkdex_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: CompatibilityDecompositionTablesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker > , DataError > { normalizer :: decomp_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu::normalizer :: provider :: Uts46DecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::normalizer :: provider :: Uts46DecompositionSupplementV1Marker > , DataError > { normalizer :: uts46d_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::normalizer :: provider :: Uts46DecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu::plurals :: provider :: CardinalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::plurals :: provider :: CardinalV1Marker > , DataError > { plurals :: cardinal_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::plurals :: provider :: CardinalV1Marker :: KEY , req)) } } impl DataProvider < :: icu::plurals :: provider :: OrdinalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::plurals :: provider :: OrdinalV1Marker > , DataError > { plurals :: ordinal_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::plurals :: provider :: OrdinalV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: AlnumV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: AlnumV1Marker > , DataError > { props :: alnum_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: AlnumV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: AlphabeticV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: AlphabeticV1Marker > , DataError > { props :: alpha_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: AlphabeticV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: AsciiHexDigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: AsciiHexDigitV1Marker > , DataError > { props :: ahex_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: AsciiHexDigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BasicEmojiV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BasicEmojiV1Marker > , DataError > { props :: basic_emoji_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BasicEmojiV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiClassNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiClassNameToValueV1Marker > , DataError > { propnames :: from :: bc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiClassNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiClassV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiClassV1Marker > , DataError > { props :: bc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiClassV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiClassValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiClassValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: bc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiClassValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiClassValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiClassValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: bc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiClassValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiControlV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiControlV1Marker > , DataError > { props :: bidi_c_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiControlV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BidiMirroredV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BidiMirroredV1Marker > , DataError > { props :: bidi_m_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BidiMirroredV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: BlankV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: BlankV1Marker > , DataError > { props :: blank_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: BlankV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CanonicalCombiningClassNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CanonicalCombiningClassNameToValueV1Marker > , DataError > { propnames :: from :: ccc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CanonicalCombiningClassNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CanonicalCombiningClassV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CanonicalCombiningClassV1Marker > , DataError > { props :: ccc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CanonicalCombiningClassV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CanonicalCombiningClassValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CanonicalCombiningClassValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: sparse :: ccc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CanonicalCombiningClassValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CanonicalCombiningClassValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CanonicalCombiningClassValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: sparse :: ccc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CanonicalCombiningClassValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CaseIgnorableV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CaseIgnorableV1Marker > , DataError > { props :: ci_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CaseIgnorableV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CaseSensitiveV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CaseSensitiveV1Marker > , DataError > { props :: sensitive_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CaseSensitiveV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: CasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: CasedV1Marker > , DataError > { props :: cased_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: CasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenCasefoldedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenCasefoldedV1Marker > , DataError > { props :: cwcf_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenCasefoldedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenCasemappedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenCasemappedV1Marker > , DataError > { props :: cwcm_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenCasemappedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenLowercasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenLowercasedV1Marker > , DataError > { props :: cwl_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenLowercasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker > , DataError > { props :: cwkcf_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenTitlecasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenTitlecasedV1Marker > , DataError > { props :: cwt_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenTitlecasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ChangesWhenUppercasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ChangesWhenUppercasedV1Marker > , DataError > { props :: cwu_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ChangesWhenUppercasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: DashV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: DashV1Marker > , DataError > { props :: dash_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: DashV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: DefaultIgnorableCodePointV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: DefaultIgnorableCodePointV1Marker > , DataError > { props :: di_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: DefaultIgnorableCodePointV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: DeprecatedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: DeprecatedV1Marker > , DataError > { props :: dep_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: DeprecatedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: DiacriticV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: DiacriticV1Marker > , DataError > { props :: dia_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: DiacriticV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EastAsianWidthNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EastAsianWidthNameToValueV1Marker > , DataError > { propnames :: from :: ea_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EastAsianWidthNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EastAsianWidthV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EastAsianWidthV1Marker > , DataError > { props :: ea_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EastAsianWidthV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EastAsianWidthValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EastAsianWidthValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: ea_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EastAsianWidthValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EastAsianWidthValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EastAsianWidthValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: ea_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EastAsianWidthValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EmojiComponentV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EmojiComponentV1Marker > , DataError > { props :: ecomp_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EmojiComponentV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EmojiModifierBaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EmojiModifierBaseV1Marker > , DataError > { props :: ebase_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EmojiModifierBaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EmojiModifierV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EmojiModifierV1Marker > , DataError > { props :: emod_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EmojiModifierV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EmojiPresentationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EmojiPresentationV1Marker > , DataError > { props :: epres_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EmojiPresentationV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: EmojiV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: EmojiV1Marker > , DataError > { props :: emoji_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: EmojiV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExemplarCharactersAuxiliaryV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExemplarCharactersAuxiliaryV1Marker > , DataError > { props :: exemplarchars :: auxiliary_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExemplarCharactersAuxiliaryV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExemplarCharactersIndexV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExemplarCharactersIndexV1Marker > , DataError > { props :: exemplarchars :: index_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExemplarCharactersIndexV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExemplarCharactersMainV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExemplarCharactersMainV1Marker > , DataError > { props :: exemplarchars :: main_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExemplarCharactersMainV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExemplarCharactersNumbersV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExemplarCharactersNumbersV1Marker > , DataError > { props :: exemplarchars :: numbers_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExemplarCharactersNumbersV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExemplarCharactersPunctuationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExemplarCharactersPunctuationV1Marker > , DataError > { props :: exemplarchars :: punctuation_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExemplarCharactersPunctuationV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExtendedPictographicV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExtendedPictographicV1Marker > , DataError > { props :: extpict_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExtendedPictographicV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ExtenderV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ExtenderV1Marker > , DataError > { props :: ext_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ExtenderV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: FullCompositionExclusionV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: FullCompositionExclusionV1Marker > , DataError > { props :: comp_ex_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: FullCompositionExclusionV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GeneralCategoryNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GeneralCategoryNameToValueV1Marker > , DataError > { propnames :: from :: gc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GeneralCategoryNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GeneralCategoryV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GeneralCategoryV1Marker > , DataError > { props :: gc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GeneralCategoryV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GeneralCategoryValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GeneralCategoryValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: gc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GeneralCategoryValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GeneralCategoryValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GeneralCategoryValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: gc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GeneralCategoryValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphV1Marker > , DataError > { props :: graph_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeBaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeBaseV1Marker > , DataError > { props :: gr_base_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeBaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeClusterBreakNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeClusterBreakNameToValueV1Marker > , DataError > { propnames :: from :: gcb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeClusterBreakNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeClusterBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeClusterBreakV1Marker > , DataError > { props :: gcb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeClusterBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeClusterBreakValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeClusterBreakValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: gcb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeClusterBreakValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeClusterBreakValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeClusterBreakValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: gcb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeClusterBreakValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeExtendV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeExtendV1Marker > , DataError > { props :: gr_ext_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeExtendV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: GraphemeLinkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: GraphemeLinkV1Marker > , DataError > { props :: gr_link_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: GraphemeLinkV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: HexDigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: HexDigitV1Marker > , DataError > { props :: hex_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: HexDigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: HyphenV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: HyphenV1Marker > , DataError > { props :: hyphen_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: HyphenV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: IdContinueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: IdContinueV1Marker > , DataError > { props :: idc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: IdContinueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: IdStartV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: IdStartV1Marker > , DataError > { props :: ids_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: IdStartV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: IdeographicV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: IdeographicV1Marker > , DataError > { props :: ideo_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: IdeographicV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: IdsBinaryOperatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: IdsBinaryOperatorV1Marker > , DataError > { props :: idsb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: IdsBinaryOperatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: IdsTrinaryOperatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: IdsTrinaryOperatorV1Marker > , DataError > { props :: idst_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: IdsTrinaryOperatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: JoinControlV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: JoinControlV1Marker > , DataError > { props :: join_c_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: JoinControlV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LineBreakNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LineBreakNameToValueV1Marker > , DataError > { propnames :: from :: lb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LineBreakNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LineBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LineBreakV1Marker > , DataError > { props :: lb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LineBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LineBreakValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LineBreakValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: lb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LineBreakValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LineBreakValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LineBreakValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: lb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LineBreakValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LogicalOrderExceptionV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LogicalOrderExceptionV1Marker > , DataError > { props :: loe_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LogicalOrderExceptionV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: LowercaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: LowercaseV1Marker > , DataError > { props :: lower_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: LowercaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: MathV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: MathV1Marker > , DataError > { props :: math_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: MathV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: NfcInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: NfcInertV1Marker > , DataError > { props :: nfcinert_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: NfcInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: NfdInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: NfdInertV1Marker > , DataError > { props :: nfdinert_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: NfdInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: NfkcInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: NfkcInertV1Marker > , DataError > { props :: nfkcinert_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: NfkcInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: NfkdInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: NfkdInertV1Marker > , DataError > { props :: nfkdinert_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: NfkdInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: NoncharacterCodePointV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: NoncharacterCodePointV1Marker > , DataError > { props :: nchar_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: NoncharacterCodePointV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: PatternSyntaxV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: PatternSyntaxV1Marker > , DataError > { props :: pat_syn_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: PatternSyntaxV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: PatternWhiteSpaceV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: PatternWhiteSpaceV1Marker > , DataError > { props :: pat_ws_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: PatternWhiteSpaceV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: PrependedConcatenationMarkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: PrependedConcatenationMarkV1Marker > , DataError > { props :: pcm_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: PrependedConcatenationMarkV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: PrintV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: PrintV1Marker > , DataError > { props :: print_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: PrintV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: QuotationMarkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: QuotationMarkV1Marker > , DataError > { props :: qmark_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: QuotationMarkV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: RadicalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: RadicalV1Marker > , DataError > { props :: radical_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: RadicalV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: RegionalIndicatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: RegionalIndicatorV1Marker > , DataError > { props :: ri_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: RegionalIndicatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ScriptNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ScriptNameToValueV1Marker > , DataError > { propnames :: from :: sc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ScriptNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ScriptV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ScriptV1Marker > , DataError > { props :: sc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ScriptV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ScriptValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ScriptValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: sc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ScriptValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ScriptValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ScriptValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear4 :: sc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ScriptValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: ScriptWithExtensionsPropertyV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: ScriptWithExtensionsPropertyV1Marker > , DataError > { props :: scx_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: ScriptWithExtensionsPropertyV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SegmentStarterV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SegmentStarterV1Marker > , DataError > { props :: segstart_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SegmentStarterV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SentenceBreakNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SentenceBreakNameToValueV1Marker > , DataError > { propnames :: from :: sb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SentenceBreakNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SentenceBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SentenceBreakV1Marker > , DataError > { props :: sb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SentenceBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SentenceBreakValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SentenceBreakValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: sb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SentenceBreakValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SentenceBreakValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SentenceBreakValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: sb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SentenceBreakValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SentenceTerminalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SentenceTerminalV1Marker > , DataError > { props :: sterm_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SentenceTerminalV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: SoftDottedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: SoftDottedV1Marker > , DataError > { props :: sd_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: SoftDottedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: TerminalPunctuationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: TerminalPunctuationV1Marker > , DataError > { props :: term_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: TerminalPunctuationV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: UnifiedIdeographV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: UnifiedIdeographV1Marker > , DataError > { props :: uideo_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: UnifiedIdeographV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: UppercaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: UppercaseV1Marker > , DataError > { props :: upper_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: UppercaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: VariationSelectorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: VariationSelectorV1Marker > , DataError > { props :: vs_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: VariationSelectorV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: WhiteSpaceV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: WhiteSpaceV1Marker > , DataError > { props :: wspace_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: WhiteSpaceV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: WordBreakNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: WordBreakNameToValueV1Marker > , DataError > { propnames :: from :: wb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: WordBreakNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: WordBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: WordBreakV1Marker > , DataError > { props :: wb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: WordBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: WordBreakValueToLongNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: WordBreakValueToLongNameV1Marker > , DataError > { propnames :: to :: long :: linear :: wb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: WordBreakValueToLongNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: WordBreakValueToShortNameV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: WordBreakValueToShortNameV1Marker > , DataError > { propnames :: to :: short :: linear :: wb_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: WordBreakValueToShortNameV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: XdigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: XdigitV1Marker > , DataError > { props :: xdigit_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: XdigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: XidContinueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: XidContinueV1Marker > , DataError > { props :: xidc_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: XidContinueV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: XidStartV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: XidStartV1Marker > , DataError > { props :: xids_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: XidStartV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: bidi_data :: BidiAuxiliaryPropertiesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: bidi_data :: BidiAuxiliaryPropertiesV1Marker > , DataError > { props :: bidiauxiliaryprops_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: bidi_data :: BidiAuxiliaryPropertiesV1Marker :: KEY , req)) } } impl DataProvider < :: icu::properties :: provider :: names :: GeneralCategoryMaskNameToValueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::properties :: provider :: names :: GeneralCategoryMaskNameToValueV1Marker > , DataError > { propnames :: from :: gcm_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::properties :: provider :: names :: GeneralCategoryMaskNameToValueV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker > , DataError > { fallback :: supplement :: co_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker > , DataError > { fallback :: likelysubtags_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker > , DataError > { fallback :: parents_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: DictionaryForWordLineExtendedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: DictionaryForWordLineExtendedV1Marker > , DataError > { segmenter :: dictionary :: wl_ext_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: DictionaryForWordLineExtendedV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: DictionaryForWordOnlyAutoV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: DictionaryForWordOnlyAutoV1Marker > , DataError > { segmenter :: dictionary :: w_auto_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: DictionaryForWordOnlyAutoV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: GraphemeClusterBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: GraphemeClusterBreakDataV1Marker > , DataError > { segmenter :: grapheme_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: GraphemeClusterBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: LineBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: LineBreakDataV1Marker > , DataError > { segmenter :: line_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: LineBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: LstmForWordLineAutoV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: LstmForWordLineAutoV1Marker > , DataError > { segmenter :: lstm :: wl_auto_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: LstmForWordLineAutoV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: SentenceBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: SentenceBreakDataV1Marker > , DataError > { segmenter :: sentence_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: SentenceBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::segmenter :: provider :: WordBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::segmenter :: provider :: WordBreakDataV1Marker > , DataError > { segmenter :: word_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::segmenter :: provider :: WordBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu::timezone :: provider :: MetazonePeriodV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu::timezone :: provider :: MetazonePeriodV1Marker > , DataError > { time_zone :: metazone_period_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu::timezone :: provider :: MetazonePeriodV1Marker :: KEY , req)) } } } } # [doc = r" Implement [`AnyProvider`] on the given struct using the data"] # [doc = r" hardcoded in this module. This allows the struct to be used with"] # [doc = r" `icu`'s `_any` constructors."] # [doc = r""] # [doc = r" This macro can only be called from its definition-site, i.e. right"] # [doc = r" after `include!`-ing the generated module."] # [doc = r" "] # [doc = r" ```compile_fail"] # [doc = r" struct MyAnyProvider;"] # [doc = r#" include!("/path/to/generated/mod.rs");"#] # [doc = r" impl_any_provider(MyAnyProvider);"] # [doc = r" ```"] # [allow (unused_macros)] macro_rules ! impl_any_provider { ($ provider : path) => { impl AnyProvider for $ provider { fn load_any (& self , key : DataKey , req : DataRequest) -> Result < AnyResponse , DataError > { const JAPANESEERASV1MARKER : :: icu_provider :: DataKeyHash = :: icu::calendar :: provider :: JapaneseErasV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDERASV1MARKER : :: icu_provider :: DataKeyHash = :: icu::calendar :: provider :: JapaneseExtendedErasV1Marker :: KEY . hashed () ; const WEEKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::calendar :: provider :: WeekDataV1Marker :: KEY . hashed () ; const COLLATIONDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationDataV1Marker :: KEY . hashed () ; const COLLATIONDIACRITICSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationDiacriticsV1Marker :: KEY . hashed () ; const COLLATIONJAMOV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationJamoV1Marker :: KEY . hashed () ; const COLLATIONMETADATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationMetadataV1Marker :: KEY . hashed () ; const COLLATIONREORDERINGV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationReorderingV1Marker :: KEY . hashed () ; const COLLATIONSPECIALPRIMARIESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::collator :: provider :: CollationSpecialPrimariesV1Marker :: KEY . hashed () ; const BUDDHISTDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker :: KEY . hashed () ; const BUDDHISTDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker :: KEY . hashed () ; const COPTICDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: CopticDateLengthsV1Marker :: KEY . hashed () ; const COPTICDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: CopticDateSymbolsV1Marker :: KEY . hashed () ; const ETHIOPIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker :: KEY . hashed () ; const ETHIOPIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker :: KEY . hashed () ; const GREGORIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: GregorianDateLengthsV1Marker :: KEY . hashed () ; const GREGORIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker :: KEY . hashed () ; const INDIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: IndianDateLengthsV1Marker :: KEY . hashed () ; const INDIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: IndianDateSymbolsV1Marker :: KEY . hashed () ; const JAPANESEDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker :: KEY . hashed () ; const JAPANESEDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker :: KEY . hashed () ; const TIMELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: TimeLengthsV1Marker :: KEY . hashed () ; const TIMESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: calendar :: TimeSymbolsV1Marker :: KEY . hashed () ; const EXEMPLARCITIESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: ExemplarCitiesV1Marker :: KEY . hashed () ; const METAZONEGENERICNAMESLONGV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker :: KEY . hashed () ; const METAZONEGENERICNAMESSHORTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker :: KEY . hashed () ; const METAZONESPECIFICNAMESLONGV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker :: KEY . hashed () ; const METAZONESPECIFICNAMESSHORTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker :: KEY . hashed () ; const TIMEZONEFORMATSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker :: KEY . hashed () ; const DECIMALSYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::decimal :: provider :: DecimalSymbolsV1Marker :: KEY . hashed () ; const ANDLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::list :: provider :: AndListV1Marker :: KEY . hashed () ; const ORLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::list :: provider :: OrListV1Marker :: KEY . hashed () ; const UNITLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::list :: provider :: UnitListV1Marker :: KEY . hashed () ; const ALIASESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::locid_transform :: provider :: AliasesV1Marker :: KEY . hashed () ; const LIKELYSUBTAGSEXTENDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::locid_transform :: provider :: LikelySubtagsExtendedV1Marker :: KEY . hashed () ; const LIKELYSUBTAGSFORLANGUAGEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::locid_transform :: provider :: LikelySubtagsForLanguageV1Marker :: KEY . hashed () ; const LIKELYSUBTAGSFORSCRIPTREGIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::locid_transform :: provider :: LikelySubtagsForScriptRegionV1Marker :: KEY . hashed () ; const LIKELYSUBTAGSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::locid_transform :: provider :: LikelySubtagsV1Marker :: KEY . hashed () ; const CANONICALCOMPOSITIONSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: CanonicalCompositionsV1Marker :: KEY . hashed () ; const CANONICALDECOMPOSITIONDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: CanonicalDecompositionDataV1Marker :: KEY . hashed () ; const CANONICALDECOMPOSITIONTABLESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: CanonicalDecompositionTablesV1Marker :: KEY . hashed () ; const COMPATIBILITYDECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker :: KEY . hashed () ; const COMPATIBILITYDECOMPOSITIONTABLESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: CompatibilityDecompositionTablesV1Marker :: KEY . hashed () ; const NONRECURSIVEDECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker :: KEY . hashed () ; const UTS46DECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::normalizer :: provider :: Uts46DecompositionSupplementV1Marker :: KEY . hashed () ; const CARDINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu::plurals :: provider :: CardinalV1Marker :: KEY . hashed () ; const ORDINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu::plurals :: provider :: OrdinalV1Marker :: KEY . hashed () ; const ALNUMV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: AlnumV1Marker :: KEY . hashed () ; const ALPHABETICV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: AlphabeticV1Marker :: KEY . hashed () ; const ASCIIHEXDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: AsciiHexDigitV1Marker :: KEY . hashed () ; const BASICEMOJIV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BasicEmojiV1Marker :: KEY . hashed () ; const BIDICLASSNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiClassNameToValueV1Marker :: KEY . hashed () ; const BIDICLASSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiClassV1Marker :: KEY . hashed () ; const BIDICLASSVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiClassValueToLongNameV1Marker :: KEY . hashed () ; const BIDICLASSVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiClassValueToShortNameV1Marker :: KEY . hashed () ; const BIDICONTROLV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiControlV1Marker :: KEY . hashed () ; const BIDIMIRROREDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BidiMirroredV1Marker :: KEY . hashed () ; const BLANKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: BlankV1Marker :: KEY . hashed () ; const CANONICALCOMBININGCLASSNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CanonicalCombiningClassNameToValueV1Marker :: KEY . hashed () ; const CANONICALCOMBININGCLASSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CanonicalCombiningClassV1Marker :: KEY . hashed () ; const CANONICALCOMBININGCLASSVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CanonicalCombiningClassValueToLongNameV1Marker :: KEY . hashed () ; const CANONICALCOMBININGCLASSVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CanonicalCombiningClassValueToShortNameV1Marker :: KEY . hashed () ; const CASEIGNORABLEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CaseIgnorableV1Marker :: KEY . hashed () ; const CASESENSITIVEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CaseSensitiveV1Marker :: KEY . hashed () ; const CASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: CasedV1Marker :: KEY . hashed () ; const CHANGESWHENCASEFOLDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenCasefoldedV1Marker :: KEY . hashed () ; const CHANGESWHENCASEMAPPEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenCasemappedV1Marker :: KEY . hashed () ; const CHANGESWHENLOWERCASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenLowercasedV1Marker :: KEY . hashed () ; const CHANGESWHENNFKCCASEFOLDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker :: KEY . hashed () ; const CHANGESWHENTITLECASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenTitlecasedV1Marker :: KEY . hashed () ; const CHANGESWHENUPPERCASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ChangesWhenUppercasedV1Marker :: KEY . hashed () ; const DASHV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: DashV1Marker :: KEY . hashed () ; const DEFAULTIGNORABLECODEPOINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: DefaultIgnorableCodePointV1Marker :: KEY . hashed () ; const DEPRECATEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: DeprecatedV1Marker :: KEY . hashed () ; const DIACRITICV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: DiacriticV1Marker :: KEY . hashed () ; const EASTASIANWIDTHNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EastAsianWidthNameToValueV1Marker :: KEY . hashed () ; const EASTASIANWIDTHV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EastAsianWidthV1Marker :: KEY . hashed () ; const EASTASIANWIDTHVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EastAsianWidthValueToLongNameV1Marker :: KEY . hashed () ; const EASTASIANWIDTHVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EastAsianWidthValueToShortNameV1Marker :: KEY . hashed () ; const EMOJICOMPONENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EmojiComponentV1Marker :: KEY . hashed () ; const EMOJIMODIFIERBASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EmojiModifierBaseV1Marker :: KEY . hashed () ; const EMOJIMODIFIERV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EmojiModifierV1Marker :: KEY . hashed () ; const EMOJIPRESENTATIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EmojiPresentationV1Marker :: KEY . hashed () ; const EMOJIV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: EmojiV1Marker :: KEY . hashed () ; const EXEMPLARCHARACTERSAUXILIARYV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExemplarCharactersAuxiliaryV1Marker :: KEY . hashed () ; const EXEMPLARCHARACTERSINDEXV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExemplarCharactersIndexV1Marker :: KEY . hashed () ; const EXEMPLARCHARACTERSMAINV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExemplarCharactersMainV1Marker :: KEY . hashed () ; const EXEMPLARCHARACTERSNUMBERSV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExemplarCharactersNumbersV1Marker :: KEY . hashed () ; const EXEMPLARCHARACTERSPUNCTUATIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExemplarCharactersPunctuationV1Marker :: KEY . hashed () ; const EXTENDEDPICTOGRAPHICV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExtendedPictographicV1Marker :: KEY . hashed () ; const EXTENDERV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ExtenderV1Marker :: KEY . hashed () ; const FULLCOMPOSITIONEXCLUSIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: FullCompositionExclusionV1Marker :: KEY . hashed () ; const GENERALCATEGORYNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GeneralCategoryNameToValueV1Marker :: KEY . hashed () ; const GENERALCATEGORYV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GeneralCategoryV1Marker :: KEY . hashed () ; const GENERALCATEGORYVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GeneralCategoryValueToLongNameV1Marker :: KEY . hashed () ; const GENERALCATEGORYVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GeneralCategoryValueToShortNameV1Marker :: KEY . hashed () ; const GRAPHV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphV1Marker :: KEY . hashed () ; const GRAPHEMEBASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeBaseV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeClusterBreakNameToValueV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeClusterBreakV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeClusterBreakValueToLongNameV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeClusterBreakValueToShortNameV1Marker :: KEY . hashed () ; const GRAPHEMEEXTENDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeExtendV1Marker :: KEY . hashed () ; const GRAPHEMELINKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: GraphemeLinkV1Marker :: KEY . hashed () ; const HEXDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: HexDigitV1Marker :: KEY . hashed () ; const HYPHENV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: HyphenV1Marker :: KEY . hashed () ; const IDCONTINUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: IdContinueV1Marker :: KEY . hashed () ; const IDSTARTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: IdStartV1Marker :: KEY . hashed () ; const IDEOGRAPHICV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: IdeographicV1Marker :: KEY . hashed () ; const IDSBINARYOPERATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: IdsBinaryOperatorV1Marker :: KEY . hashed () ; const IDSTRINARYOPERATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: IdsTrinaryOperatorV1Marker :: KEY . hashed () ; const JOINCONTROLV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: JoinControlV1Marker :: KEY . hashed () ; const LINEBREAKNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LineBreakNameToValueV1Marker :: KEY . hashed () ; const LINEBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LineBreakV1Marker :: KEY . hashed () ; const LINEBREAKVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LineBreakValueToLongNameV1Marker :: KEY . hashed () ; const LINEBREAKVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LineBreakValueToShortNameV1Marker :: KEY . hashed () ; const LOGICALORDEREXCEPTIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LogicalOrderExceptionV1Marker :: KEY . hashed () ; const LOWERCASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: LowercaseV1Marker :: KEY . hashed () ; const MATHV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: MathV1Marker :: KEY . hashed () ; const NFCINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: NfcInertV1Marker :: KEY . hashed () ; const NFDINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: NfdInertV1Marker :: KEY . hashed () ; const NFKCINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: NfkcInertV1Marker :: KEY . hashed () ; const NFKDINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: NfkdInertV1Marker :: KEY . hashed () ; const NONCHARACTERCODEPOINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: NoncharacterCodePointV1Marker :: KEY . hashed () ; const PATTERNSYNTAXV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: PatternSyntaxV1Marker :: KEY . hashed () ; const PATTERNWHITESPACEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: PatternWhiteSpaceV1Marker :: KEY . hashed () ; const PREPENDEDCONCATENATIONMARKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: PrependedConcatenationMarkV1Marker :: KEY . hashed () ; const PRINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: PrintV1Marker :: KEY . hashed () ; const QUOTATIONMARKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: QuotationMarkV1Marker :: KEY . hashed () ; const RADICALV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: RadicalV1Marker :: KEY . hashed () ; const REGIONALINDICATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: RegionalIndicatorV1Marker :: KEY . hashed () ; const SCRIPTNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ScriptNameToValueV1Marker :: KEY . hashed () ; const SCRIPTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ScriptV1Marker :: KEY . hashed () ; const SCRIPTVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ScriptValueToLongNameV1Marker :: KEY . hashed () ; const SCRIPTVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ScriptValueToShortNameV1Marker :: KEY . hashed () ; const SCRIPTWITHEXTENSIONSPROPERTYV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: ScriptWithExtensionsPropertyV1Marker :: KEY . hashed () ; const SEGMENTSTARTERV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SegmentStarterV1Marker :: KEY . hashed () ; const SENTENCEBREAKNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SentenceBreakNameToValueV1Marker :: KEY . hashed () ; const SENTENCEBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SentenceBreakV1Marker :: KEY . hashed () ; const SENTENCEBREAKVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SentenceBreakValueToLongNameV1Marker :: KEY . hashed () ; const SENTENCEBREAKVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SentenceBreakValueToShortNameV1Marker :: KEY . hashed () ; const SENTENCETERMINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SentenceTerminalV1Marker :: KEY . hashed () ; const SOFTDOTTEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: SoftDottedV1Marker :: KEY . hashed () ; const TERMINALPUNCTUATIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: TerminalPunctuationV1Marker :: KEY . hashed () ; const UNIFIEDIDEOGRAPHV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: UnifiedIdeographV1Marker :: KEY . hashed () ; const UPPERCASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: UppercaseV1Marker :: KEY . hashed () ; const VARIATIONSELECTORV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: VariationSelectorV1Marker :: KEY . hashed () ; const WHITESPACEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: WhiteSpaceV1Marker :: KEY . hashed () ; const WORDBREAKNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: WordBreakNameToValueV1Marker :: KEY . hashed () ; const WORDBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: WordBreakV1Marker :: KEY . hashed () ; const WORDBREAKVALUETOLONGNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: WordBreakValueToLongNameV1Marker :: KEY . hashed () ; const WORDBREAKVALUETOSHORTNAMEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: WordBreakValueToShortNameV1Marker :: KEY . hashed () ; const XDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: XdigitV1Marker :: KEY . hashed () ; const XIDCONTINUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: XidContinueV1Marker :: KEY . hashed () ; const XIDSTARTV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: XidStartV1Marker :: KEY . hashed () ; const BIDIAUXILIARYPROPERTIESV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: bidi_data :: BidiAuxiliaryPropertiesV1Marker :: KEY . hashed () ; const GENERALCATEGORYMASKNAMETOVALUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu::properties :: provider :: names :: GeneralCategoryMaskNameToValueV1Marker :: KEY . hashed () ; const COLLATIONFALLBACKSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker :: KEY . hashed () ; const LOCALEFALLBACKLIKELYSUBTAGSV1MARKER : :: icu_provider :: DataKeyHash = :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker :: KEY . hashed () ; const LOCALEFALLBACKPARENTSV1MARKER : :: icu_provider :: DataKeyHash = :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker :: KEY . hashed () ; const DICTIONARYFORWORDLINEEXTENDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: DictionaryForWordLineExtendedV1Marker :: KEY . hashed () ; const DICTIONARYFORWORDONLYAUTOV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: DictionaryForWordOnlyAutoV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: GraphemeClusterBreakDataV1Marker :: KEY . hashed () ; const LINEBREAKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: LineBreakDataV1Marker :: KEY . hashed () ; const LSTMFORWORDLINEAUTOV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: LstmForWordLineAutoV1Marker :: KEY . hashed () ; const SENTENCEBREAKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: SentenceBreakDataV1Marker :: KEY . hashed () ; const WORDBREAKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu::segmenter :: provider :: WordBreakDataV1Marker :: KEY . hashed () ; const METAZONEPERIODV1MARKER : :: icu_provider :: DataKeyHash = :: icu::timezone :: provider :: MetazonePeriodV1Marker :: KEY . hashed () ; match key . hashed () { JAPANESEERASV1MARKER => calendar :: japanese_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JAPANESEEXTENDEDERASV1MARKER => calendar :: japanext_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WEEKDATAV1MARKER => datetime :: week_data_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONDATAV1MARKER => collator :: data_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONDIACRITICSV1MARKER => collator :: dia_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONJAMOV1MARKER => collator :: jamo_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONMETADATAV1MARKER => collator :: meta_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONREORDERINGV1MARKER => collator :: reord_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONSPECIALPRIMARIESV1MARKER => collator :: prim_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BUDDHISTDATELENGTHSV1MARKER => datetime :: buddhist :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BUDDHISTDATESYMBOLSV1MARKER => datetime :: buddhist :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COPTICDATELENGTHSV1MARKER => datetime :: coptic :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COPTICDATESYMBOLSV1MARKER => datetime :: coptic :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ETHIOPIANDATELENGTHSV1MARKER => datetime :: ethiopic :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ETHIOPIANDATESYMBOLSV1MARKER => datetime :: ethiopic :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GREGORIANDATELENGTHSV1MARKER => datetime :: gregory :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GREGORIANDATESYMBOLSV1MARKER => datetime :: gregory :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , INDIANDATELENGTHSV1MARKER => datetime :: indian :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , INDIANDATESYMBOLSV1MARKER => datetime :: indian :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JAPANESEDATELENGTHSV1MARKER => datetime :: japanese :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JAPANESEDATESYMBOLSV1MARKER => datetime :: japanese :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JAPANESEEXTENDEDDATELENGTHSV1MARKER => datetime :: japanext :: datelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JAPANESEEXTENDEDDATESYMBOLSV1MARKER => datetime :: japanext :: datesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , TIMELENGTHSV1MARKER => datetime :: timelengths_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , TIMESYMBOLSV1MARKER => datetime :: timesymbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCITIESV1MARKER => time_zone :: exemplar_cities_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , METAZONEGENERICNAMESLONGV1MARKER => time_zone :: generic_long_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , METAZONEGENERICNAMESSHORTV1MARKER => time_zone :: generic_short_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , METAZONESPECIFICNAMESLONGV1MARKER => time_zone :: specific_long_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , METAZONESPECIFICNAMESSHORTV1MARKER => time_zone :: specific_short_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , TIMEZONEFORMATSV1MARKER => time_zone :: formats_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DECIMALSYMBOLSV1MARKER => decimal :: symbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ANDLISTV1MARKER => list :: and_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ORLISTV1MARKER => list :: or_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , UNITLISTV1MARKER => list :: unit_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ALIASESV1MARKER => locid_transform :: aliases_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LIKELYSUBTAGSEXTENDEDV1MARKER => locid_transform :: likelysubtags_ext_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LIKELYSUBTAGSFORLANGUAGEV1MARKER => locid_transform :: likelysubtags_l_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LIKELYSUBTAGSFORSCRIPTREGIONV1MARKER => locid_transform :: likelysubtags_sr_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LIKELYSUBTAGSV1MARKER => locid_transform :: likelysubtags_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALCOMPOSITIONSV1MARKER => normalizer :: comp_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALDECOMPOSITIONDATAV1MARKER => normalizer :: nfd_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALDECOMPOSITIONTABLESV1MARKER => normalizer :: nfdex_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COMPATIBILITYDECOMPOSITIONSUPPLEMENTV1MARKER => normalizer :: nfkd_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COMPATIBILITYDECOMPOSITIONTABLESV1MARKER => normalizer :: nfkdex_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NONRECURSIVEDECOMPOSITIONSUPPLEMENTV1MARKER => normalizer :: decomp_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , UTS46DECOMPOSITIONSUPPLEMENTV1MARKER => normalizer :: uts46d_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CARDINALV1MARKER => plurals :: cardinal_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ORDINALV1MARKER => plurals :: ordinal_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ALNUMV1MARKER => props :: alnum_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ALPHABETICV1MARKER => props :: alpha_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , ASCIIHEXDIGITV1MARKER => props :: ahex_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BASICEMOJIV1MARKER => props :: basic_emoji_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDICLASSNAMETOVALUEV1MARKER => propnames :: from :: bc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDICLASSV1MARKER => props :: bc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDICLASSVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: bc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDICLASSVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: bc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDICONTROLV1MARKER => props :: bidi_c_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDIMIRROREDV1MARKER => props :: bidi_m_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BLANKV1MARKER => props :: blank_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALCOMBININGCLASSNAMETOVALUEV1MARKER => propnames :: from :: ccc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALCOMBININGCLASSV1MARKER => props :: ccc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALCOMBININGCLASSVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: sparse :: ccc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CANONICALCOMBININGCLASSVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: sparse :: ccc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CASEIGNORABLEV1MARKER => props :: ci_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CASESENSITIVEV1MARKER => props :: sensitive_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CASEDV1MARKER => props :: cased_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENCASEFOLDEDV1MARKER => props :: cwcf_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENCASEMAPPEDV1MARKER => props :: cwcm_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENLOWERCASEDV1MARKER => props :: cwl_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENNFKCCASEFOLDEDV1MARKER => props :: cwkcf_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENTITLECASEDV1MARKER => props :: cwt_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , CHANGESWHENUPPERCASEDV1MARKER => props :: cwu_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DASHV1MARKER => props :: dash_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DEFAULTIGNORABLECODEPOINTV1MARKER => props :: di_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DEPRECATEDV1MARKER => props :: dep_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DIACRITICV1MARKER => props :: dia_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EASTASIANWIDTHNAMETOVALUEV1MARKER => propnames :: from :: ea_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EASTASIANWIDTHV1MARKER => props :: ea_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EASTASIANWIDTHVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: ea_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EASTASIANWIDTHVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: ea_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EMOJICOMPONENTV1MARKER => props :: ecomp_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EMOJIMODIFIERBASEV1MARKER => props :: ebase_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EMOJIMODIFIERV1MARKER => props :: emod_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EMOJIPRESENTATIONV1MARKER => props :: epres_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EMOJIV1MARKER => props :: emoji_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCHARACTERSAUXILIARYV1MARKER => props :: exemplarchars :: auxiliary_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCHARACTERSINDEXV1MARKER => props :: exemplarchars :: index_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCHARACTERSMAINV1MARKER => props :: exemplarchars :: main_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCHARACTERSNUMBERSV1MARKER => props :: exemplarchars :: numbers_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXEMPLARCHARACTERSPUNCTUATIONV1MARKER => props :: exemplarchars :: punctuation_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXTENDEDPICTOGRAPHICV1MARKER => props :: extpict_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , EXTENDERV1MARKER => props :: ext_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , FULLCOMPOSITIONEXCLUSIONV1MARKER => props :: comp_ex_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GENERALCATEGORYNAMETOVALUEV1MARKER => propnames :: from :: gc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GENERALCATEGORYV1MARKER => props :: gc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GENERALCATEGORYVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: gc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GENERALCATEGORYVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: gc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHV1MARKER => props :: graph_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMEBASEV1MARKER => props :: gr_base_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMECLUSTERBREAKNAMETOVALUEV1MARKER => propnames :: from :: gcb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMECLUSTERBREAKV1MARKER => props :: gcb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMECLUSTERBREAKVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: gcb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMECLUSTERBREAKVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: gcb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMEEXTENDV1MARKER => props :: gr_ext_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMELINKV1MARKER => props :: gr_link_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , HEXDIGITV1MARKER => props :: hex_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , HYPHENV1MARKER => props :: hyphen_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , IDCONTINUEV1MARKER => props :: idc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , IDSTARTV1MARKER => props :: ids_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , IDEOGRAPHICV1MARKER => props :: ideo_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , IDSBINARYOPERATORV1MARKER => props :: idsb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , IDSTRINARYOPERATORV1MARKER => props :: idst_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , JOINCONTROLV1MARKER => props :: join_c_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LINEBREAKNAMETOVALUEV1MARKER => propnames :: from :: lb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LINEBREAKV1MARKER => props :: lb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LINEBREAKVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: lb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LINEBREAKVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: lb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LOGICALORDEREXCEPTIONV1MARKER => props :: loe_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LOWERCASEV1MARKER => props :: lower_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , MATHV1MARKER => props :: math_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NFCINERTV1MARKER => props :: nfcinert_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NFDINERTV1MARKER => props :: nfdinert_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NFKCINERTV1MARKER => props :: nfkcinert_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NFKDINERTV1MARKER => props :: nfkdinert_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , NONCHARACTERCODEPOINTV1MARKER => props :: nchar_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , PATTERNSYNTAXV1MARKER => props :: pat_syn_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , PATTERNWHITESPACEV1MARKER => props :: pat_ws_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , PREPENDEDCONCATENATIONMARKV1MARKER => props :: pcm_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , PRINTV1MARKER => props :: print_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , QUOTATIONMARKV1MARKER => props :: qmark_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , RADICALV1MARKER => props :: radical_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , REGIONALINDICATORV1MARKER => props :: ri_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SCRIPTNAMETOVALUEV1MARKER => propnames :: from :: sc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SCRIPTV1MARKER => props :: sc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SCRIPTVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: sc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SCRIPTVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear4 :: sc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SCRIPTWITHEXTENSIONSPROPERTYV1MARKER => props :: scx_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SEGMENTSTARTERV1MARKER => props :: segstart_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCEBREAKNAMETOVALUEV1MARKER => propnames :: from :: sb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCEBREAKV1MARKER => props :: sb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCEBREAKVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: sb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCEBREAKVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: sb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCETERMINALV1MARKER => props :: sterm_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SOFTDOTTEDV1MARKER => props :: sd_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , TERMINALPUNCTUATIONV1MARKER => props :: term_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , UNIFIEDIDEOGRAPHV1MARKER => props :: uideo_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , UPPERCASEV1MARKER => props :: upper_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , VARIATIONSELECTORV1MARKER => props :: vs_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WHITESPACEV1MARKER => props :: wspace_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WORDBREAKNAMETOVALUEV1MARKER => propnames :: from :: wb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WORDBREAKV1MARKER => props :: wb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WORDBREAKVALUETOLONGNAMEV1MARKER => propnames :: to :: long :: linear :: wb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WORDBREAKVALUETOSHORTNAMEV1MARKER => propnames :: to :: short :: linear :: wb_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , XDIGITV1MARKER => props :: xdigit_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , XIDCONTINUEV1MARKER => props :: xidc_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , XIDSTARTV1MARKER => props :: xids_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , BIDIAUXILIARYPROPERTIESV1MARKER => props :: bidiauxiliaryprops_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GENERALCATEGORYMASKNAMETOVALUEV1MARKER => propnames :: from :: gcm_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , COLLATIONFALLBACKSUPPLEMENTV1MARKER => fallback :: supplement :: co_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LOCALEFALLBACKLIKELYSUBTAGSV1MARKER => fallback :: likelysubtags_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LOCALEFALLBACKPARENTSV1MARKER => fallback :: parents_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DICTIONARYFORWORDLINEEXTENDEDV1MARKER => segmenter :: dictionary :: wl_ext_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , DICTIONARYFORWORDONLYAUTOV1MARKER => segmenter :: dictionary :: w_auto_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , GRAPHEMECLUSTERBREAKDATAV1MARKER => segmenter :: grapheme_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LINEBREAKDATAV1MARKER => segmenter :: line_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , LSTMFORWORDLINEAUTOV1MARKER => segmenter :: lstm :: wl_auto_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , SENTENCEBREAKDATAV1MARKER => segmenter :: sentence_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , WORDBREAKDATAV1MARKER => segmenter :: word_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , METAZONEPERIODV1MARKER => time_zone :: metazone_period_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , _ => return Err (DataErrorKind :: MissingDataKey . with_req (key , req)) , } . map (| payload | AnyResponse { payload : Some (payload) , metadata : Default :: default () , }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (key , req)) } } } } pub struct BakedDataProvider ; impl_data_provider ! (BakedDataProvider) ;