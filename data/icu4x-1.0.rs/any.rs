// @generated
impl AnyProvider for BakedDataProvider { fn load_any (& self , key : DataKey , req : DataRequest) -> Result < AnyResponse , DataError > { const JAPANESEERASV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: calendar :: provider :: JapaneseErasV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDERASV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: calendar :: provider :: JapaneseExtendedErasV1Marker :: KEY . hashed () ; const WEEKDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: calendar :: provider :: WeekDataV1Marker :: KEY . hashed () ; const COLLATIONDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationDataV1Marker :: KEY . hashed () ; const COLLATIONDIACRITICSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationDiacriticsV1Marker :: KEY . hashed () ; const COLLATIONJAMOV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationJamoV1Marker :: KEY . hashed () ; const COLLATIONMETADATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationMetadataV1Marker :: KEY . hashed () ; const COLLATIONREORDERINGV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationReorderingV1Marker :: KEY . hashed () ; const COLLATIONSPECIALPRIMARIESV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: collator :: provider :: CollationSpecialPrimariesV1Marker :: KEY . hashed () ; const BUDDHISTDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker :: KEY . hashed () ; const BUDDHISTDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker :: KEY . hashed () ; const COPTICDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: CopticDateLengthsV1Marker :: KEY . hashed () ; const COPTICDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: CopticDateSymbolsV1Marker :: KEY . hashed () ; const ETHIOPIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker :: KEY . hashed () ; const ETHIOPIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker :: KEY . hashed () ; const GREGORIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: GregorianDateLengthsV1Marker :: KEY . hashed () ; const GREGORIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker :: KEY . hashed () ; const INDIANDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: IndianDateLengthsV1Marker :: KEY . hashed () ; const INDIANDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: IndianDateSymbolsV1Marker :: KEY . hashed () ; const JAPANESEDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker :: KEY . hashed () ; const JAPANESEDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDDATELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker :: KEY . hashed () ; const JAPANESEEXTENDEDDATESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker :: KEY . hashed () ; const TIMELENGTHSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: TimeLengthsV1Marker :: KEY . hashed () ; const TIMESYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: calendar :: TimeSymbolsV1Marker :: KEY . hashed () ; const EXEMPLARCITIESV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: ExemplarCitiesV1Marker :: KEY . hashed () ; const METAZONEGENERICNAMESLONGV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker :: KEY . hashed () ; const METAZONEGENERICNAMESSHORTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker :: KEY . hashed () ; const METAZONESPECIFICNAMESLONGV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker :: KEY . hashed () ; const METAZONESPECIFICNAMESSHORTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker :: KEY . hashed () ; const TIMEZONEFORMATSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker :: KEY . hashed () ; const DECIMALSYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: decimal :: provider :: DecimalSymbolsV1Marker :: KEY . hashed () ; const ANDLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: list :: provider :: AndListV1Marker :: KEY . hashed () ; const ORLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: list :: provider :: OrListV1Marker :: KEY . hashed () ; const UNITLISTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: list :: provider :: UnitListV1Marker :: KEY . hashed () ; const ALIASESV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: locid_transform :: provider :: AliasesV1Marker :: KEY . hashed () ; const LIKELYSUBTAGSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: locid_transform :: provider :: LikelySubtagsV1Marker :: KEY . hashed () ; const CANONICALCOMPOSITIONSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: CanonicalCompositionsV1Marker :: KEY . hashed () ; const CANONICALDECOMPOSITIONDATAV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: CanonicalDecompositionDataV1Marker :: KEY . hashed () ; const CANONICALDECOMPOSITIONTABLESV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: CanonicalDecompositionTablesV1Marker :: KEY . hashed () ; const COMPATIBILITYDECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker :: KEY . hashed () ; const COMPATIBILITYDECOMPOSITIONTABLESV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: CompatibilityDecompositionTablesV1Marker :: KEY . hashed () ; const NONRECURSIVEDECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker :: KEY . hashed () ; const UTS46DECOMPOSITIONSUPPLEMENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: normalizer :: provider :: Uts46DecompositionSupplementV1Marker :: KEY . hashed () ; const CARDINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: plurals :: provider :: CardinalV1Marker :: KEY . hashed () ; const ORDINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: plurals :: provider :: OrdinalV1Marker :: KEY . hashed () ; const ALNUMV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: AlnumV1Marker :: KEY . hashed () ; const ALPHABETICV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: AlphabeticV1Marker :: KEY . hashed () ; const ASCIIHEXDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: AsciiHexDigitV1Marker :: KEY . hashed () ; const BIDICLASSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: BidiClassV1Marker :: KEY . hashed () ; const BIDICONTROLV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: BidiControlV1Marker :: KEY . hashed () ; const BIDIMIRROREDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: BidiMirroredV1Marker :: KEY . hashed () ; const BLANKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: BlankV1Marker :: KEY . hashed () ; const CANONICALCOMBININGCLASSV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: CanonicalCombiningClassV1Marker :: KEY . hashed () ; const CASEIGNORABLEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: CaseIgnorableV1Marker :: KEY . hashed () ; const CASESENSITIVEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: CaseSensitiveV1Marker :: KEY . hashed () ; const CASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: CasedV1Marker :: KEY . hashed () ; const CHANGESWHENCASEFOLDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenCasefoldedV1Marker :: KEY . hashed () ; const CHANGESWHENCASEMAPPEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenCasemappedV1Marker :: KEY . hashed () ; const CHANGESWHENLOWERCASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenLowercasedV1Marker :: KEY . hashed () ; const CHANGESWHENNFKCCASEFOLDEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker :: KEY . hashed () ; const CHANGESWHENTITLECASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenTitlecasedV1Marker :: KEY . hashed () ; const CHANGESWHENUPPERCASEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ChangesWhenUppercasedV1Marker :: KEY . hashed () ; const DASHV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: DashV1Marker :: KEY . hashed () ; const DEFAULTIGNORABLECODEPOINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: DefaultIgnorableCodePointV1Marker :: KEY . hashed () ; const DEPRECATEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: DeprecatedV1Marker :: KEY . hashed () ; const DIACRITICV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: DiacriticV1Marker :: KEY . hashed () ; const EASTASIANWIDTHV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EastAsianWidthV1Marker :: KEY . hashed () ; const EMOJICOMPONENTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EmojiComponentV1Marker :: KEY . hashed () ; const EMOJIMODIFIERBASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EmojiModifierBaseV1Marker :: KEY . hashed () ; const EMOJIMODIFIERV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EmojiModifierV1Marker :: KEY . hashed () ; const EMOJIPRESENTATIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EmojiPresentationV1Marker :: KEY . hashed () ; const EMOJIV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: EmojiV1Marker :: KEY . hashed () ; const EXTENDEDPICTOGRAPHICV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ExtendedPictographicV1Marker :: KEY . hashed () ; const EXTENDERV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ExtenderV1Marker :: KEY . hashed () ; const FULLCOMPOSITIONEXCLUSIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: FullCompositionExclusionV1Marker :: KEY . hashed () ; const GENERALCATEGORYV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GeneralCategoryV1Marker :: KEY . hashed () ; const GRAPHV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GraphV1Marker :: KEY . hashed () ; const GRAPHEMEBASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GraphemeBaseV1Marker :: KEY . hashed () ; const GRAPHEMECLUSTERBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GraphemeClusterBreakV1Marker :: KEY . hashed () ; const GRAPHEMEEXTENDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GraphemeExtendV1Marker :: KEY . hashed () ; const GRAPHEMELINKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: GraphemeLinkV1Marker :: KEY . hashed () ; const HEXDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: HexDigitV1Marker :: KEY . hashed () ; const HYPHENV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: HyphenV1Marker :: KEY . hashed () ; const IDCONTINUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: IdContinueV1Marker :: KEY . hashed () ; const IDSTARTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: IdStartV1Marker :: KEY . hashed () ; const IDEOGRAPHICV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: IdeographicV1Marker :: KEY . hashed () ; const IDSBINARYOPERATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: IdsBinaryOperatorV1Marker :: KEY . hashed () ; const IDSTRINARYOPERATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: IdsTrinaryOperatorV1Marker :: KEY . hashed () ; const JOINCONTROLV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: JoinControlV1Marker :: KEY . hashed () ; const LINEBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: LineBreakV1Marker :: KEY . hashed () ; const LOGICALORDEREXCEPTIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: LogicalOrderExceptionV1Marker :: KEY . hashed () ; const LOWERCASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: LowercaseV1Marker :: KEY . hashed () ; const MATHV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: MathV1Marker :: KEY . hashed () ; const NFCINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: NfcInertV1Marker :: KEY . hashed () ; const NFDINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: NfdInertV1Marker :: KEY . hashed () ; const NFKCINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: NfkcInertV1Marker :: KEY . hashed () ; const NFKDINERTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: NfkdInertV1Marker :: KEY . hashed () ; const NONCHARACTERCODEPOINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: NoncharacterCodePointV1Marker :: KEY . hashed () ; const PATTERNSYNTAXV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: PatternSyntaxV1Marker :: KEY . hashed () ; const PATTERNWHITESPACEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: PatternWhiteSpaceV1Marker :: KEY . hashed () ; const PREPENDEDCONCATENATIONMARKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: PrependedConcatenationMarkV1Marker :: KEY . hashed () ; const PRINTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: PrintV1Marker :: KEY . hashed () ; const QUOTATIONMARKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: QuotationMarkV1Marker :: KEY . hashed () ; const RADICALV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: RadicalV1Marker :: KEY . hashed () ; const REGIONALINDICATORV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: RegionalIndicatorV1Marker :: KEY . hashed () ; const SCRIPTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ScriptV1Marker :: KEY . hashed () ; const SCRIPTWITHEXTENSIONSPROPERTYV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: ScriptWithExtensionsPropertyV1Marker :: KEY . hashed () ; const SEGMENTSTARTERV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: SegmentStarterV1Marker :: KEY . hashed () ; const SENTENCEBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: SentenceBreakV1Marker :: KEY . hashed () ; const SENTENCETERMINALV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: SentenceTerminalV1Marker :: KEY . hashed () ; const SOFTDOTTEDV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: SoftDottedV1Marker :: KEY . hashed () ; const TERMINALPUNCTUATIONV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: TerminalPunctuationV1Marker :: KEY . hashed () ; const UNIFIEDIDEOGRAPHV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: UnifiedIdeographV1Marker :: KEY . hashed () ; const UPPERCASEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: UppercaseV1Marker :: KEY . hashed () ; const VARIATIONSELECTORV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: VariationSelectorV1Marker :: KEY . hashed () ; const WHITESPACEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: WhiteSpaceV1Marker :: KEY . hashed () ; const WORDBREAKV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: WordBreakV1Marker :: KEY . hashed () ; const XDIGITV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: XdigitV1Marker :: KEY . hashed () ; const XIDCONTINUEV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: XidContinueV1Marker :: KEY . hashed () ; const XIDSTARTV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: properties :: provider :: XidStartV1Marker :: KEY . hashed () ; const LOCALEFALLBACKLIKELYSUBTAGSV1MARKER : :: icu_provider :: DataKeyHash = :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker :: KEY . hashed () ; const LOCALEFALLBACKPARENTSV1MARKER : :: icu_provider :: DataKeyHash = :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker :: KEY . hashed () ; const METAZONEPERIODV1MARKER : :: icu_provider :: DataKeyHash = :: icu :: timezone :: provider :: MetazonePeriodV1Marker :: KEY . hashed () ; Ok (AnyResponse { payload : Some (match key . hashed () { JAPANESEERASV1MARKER => { calendar :: japanese_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JAPANESEEXTENDEDERASV1MARKER => { calendar :: japanext_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } WEEKDATAV1MARKER => { datetime :: week_data_v1_r :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONDATAV1MARKER => { collator :: data_v1_c_u_co :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONDIACRITICSV1MARKER => { collator :: dia_v1_c_u_co :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONJAMOV1MARKER => { collator :: jamo_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONMETADATAV1MARKER => { collator :: meta_v1_c_u_co :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONREORDERINGV1MARKER => { collator :: reord_v1_c_u_co :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COLLATIONSPECIALPRIMARIESV1MARKER => { collator :: prim_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BUDDHISTDATELENGTHSV1MARKER => { datetime :: buddhist :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BUDDHISTDATESYMBOLSV1MARKER => { datetime :: buddhist :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COPTICDATELENGTHSV1MARKER => { datetime :: coptic :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COPTICDATESYMBOLSV1MARKER => { datetime :: coptic :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ETHIOPIANDATELENGTHSV1MARKER => { datetime :: ethiopic :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ETHIOPIANDATESYMBOLSV1MARKER => { datetime :: ethiopic :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GREGORIANDATELENGTHSV1MARKER => { datetime :: gregory :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GREGORIANDATESYMBOLSV1MARKER => { datetime :: gregory :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } INDIANDATELENGTHSV1MARKER => { datetime :: indian :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } INDIANDATESYMBOLSV1MARKER => { datetime :: indian :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JAPANESEDATELENGTHSV1MARKER => { datetime :: japanese :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JAPANESEDATESYMBOLSV1MARKER => { datetime :: japanese :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JAPANESEEXTENDEDDATELENGTHSV1MARKER => { datetime :: japanext :: datelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JAPANESEEXTENDEDDATESYMBOLSV1MARKER => { datetime :: japanext :: datesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } TIMELENGTHSV1MARKER => { datetime :: timelengths_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } TIMESYMBOLSV1MARKER => { datetime :: timesymbols_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EXEMPLARCITIESV1MARKER => { time_zone :: exemplar_cities_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } METAZONEGENERICNAMESLONGV1MARKER => { time_zone :: generic_long_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } METAZONEGENERICNAMESSHORTV1MARKER => { time_zone :: generic_short_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } METAZONESPECIFICNAMESLONGV1MARKER => { time_zone :: specific_long_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } METAZONESPECIFICNAMESSHORTV1MARKER => { time_zone :: specific_short_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } TIMEZONEFORMATSV1MARKER => { time_zone :: formats_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } DECIMALSYMBOLSV1MARKER => { decimal :: symbols_v1_u_nu :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ANDLISTV1MARKER => { list :: and_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ORLISTV1MARKER => { list :: or_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } UNITLISTV1MARKER => { list :: unit_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ALIASESV1MARKER => { locid_transform :: aliases_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LIKELYSUBTAGSV1MARKER => { locid_transform :: likelysubtags_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CANONICALCOMPOSITIONSV1MARKER => { normalizer :: comp_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CANONICALDECOMPOSITIONDATAV1MARKER => { normalizer :: nfd_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CANONICALDECOMPOSITIONTABLESV1MARKER => { normalizer :: nfdex_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COMPATIBILITYDECOMPOSITIONSUPPLEMENTV1MARKER => { normalizer :: nfkd_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } COMPATIBILITYDECOMPOSITIONTABLESV1MARKER => { normalizer :: nfkdex_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NONRECURSIVEDECOMPOSITIONSUPPLEMENTV1MARKER => { normalizer :: decomp_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } UTS46DECOMPOSITIONSUPPLEMENTV1MARKER => { normalizer :: uts46d_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CARDINALV1MARKER => { plurals :: cardinal_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ORDINALV1MARKER => { plurals :: ordinal_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ALNUMV1MARKER => { props :: alnum_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ALPHABETICV1MARKER => { props :: alpha_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } ASCIIHEXDIGITV1MARKER => { props :: ahex_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BIDICLASSV1MARKER => { props :: bc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BIDICONTROLV1MARKER => { props :: bidi_c_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BIDIMIRROREDV1MARKER => { props :: bidi_m_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } BLANKV1MARKER => { props :: blank_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CANONICALCOMBININGCLASSV1MARKER => { props :: ccc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CASEIGNORABLEV1MARKER => { props :: ci_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CASESENSITIVEV1MARKER => { props :: sensitive_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CASEDV1MARKER => { props :: cased_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENCASEFOLDEDV1MARKER => { props :: cwcf_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENCASEMAPPEDV1MARKER => { props :: cwcm_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENLOWERCASEDV1MARKER => { props :: cwl_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENNFKCCASEFOLDEDV1MARKER => { props :: cwkcf_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENTITLECASEDV1MARKER => { props :: cwt_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } CHANGESWHENUPPERCASEDV1MARKER => { props :: cwu_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } DASHV1MARKER => { props :: dash_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } DEFAULTIGNORABLECODEPOINTV1MARKER => { props :: di_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } DEPRECATEDV1MARKER => { props :: dep_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } DIACRITICV1MARKER => { props :: dia_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EASTASIANWIDTHV1MARKER => { props :: ea_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EMOJICOMPONENTV1MARKER => { props :: ecomp_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EMOJIMODIFIERBASEV1MARKER => { props :: ebase_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EMOJIMODIFIERV1MARKER => { props :: emod_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EMOJIPRESENTATIONV1MARKER => { props :: epres_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EMOJIV1MARKER => { props :: emoji_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EXTENDEDPICTOGRAPHICV1MARKER => { props :: extpict_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } EXTENDERV1MARKER => { props :: ext_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } FULLCOMPOSITIONEXCLUSIONV1MARKER => { props :: comp_ex_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GENERALCATEGORYV1MARKER => { props :: gc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GRAPHV1MARKER => { props :: graph_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GRAPHEMEBASEV1MARKER => { props :: gr_base_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GRAPHEMECLUSTERBREAKV1MARKER => { props :: gcb_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GRAPHEMEEXTENDV1MARKER => { props :: gr_ext_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } GRAPHEMELINKV1MARKER => { props :: gr_link_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } HEXDIGITV1MARKER => { props :: hex_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } HYPHENV1MARKER => { props :: hyphen_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } IDCONTINUEV1MARKER => { props :: idc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } IDSTARTV1MARKER => { props :: ids_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } IDEOGRAPHICV1MARKER => { props :: ideo_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } IDSBINARYOPERATORV1MARKER => { props :: idsb_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } IDSTRINARYOPERATORV1MARKER => { props :: idst_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } JOINCONTROLV1MARKER => { props :: join_c_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LINEBREAKV1MARKER => { props :: lb_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LOGICALORDEREXCEPTIONV1MARKER => { props :: loe_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LOWERCASEV1MARKER => { props :: lower_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } MATHV1MARKER => { props :: math_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NFCINERTV1MARKER => { props :: nfcinert_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NFDINERTV1MARKER => { props :: nfdinert_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NFKCINERTV1MARKER => { props :: nfkcinert_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NFKDINERTV1MARKER => { props :: nfkdinert_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } NONCHARACTERCODEPOINTV1MARKER => { props :: nchar_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } PATTERNSYNTAXV1MARKER => { props :: pat_syn_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } PATTERNWHITESPACEV1MARKER => { props :: pat_ws_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } PREPENDEDCONCATENATIONMARKV1MARKER => { props :: pcm_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } PRINTV1MARKER => { props :: print_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } QUOTATIONMARKV1MARKER => { props :: qmark_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } RADICALV1MARKER => { props :: radical_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } REGIONALINDICATORV1MARKER => { props :: ri_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SCRIPTV1MARKER => { props :: sc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SCRIPTWITHEXTENSIONSPROPERTYV1MARKER => { props :: scx_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SEGMENTSTARTERV1MARKER => { props :: segstart_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SENTENCEBREAKV1MARKER => { props :: sb_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SENTENCETERMINALV1MARKER => { props :: sterm_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } SOFTDOTTEDV1MARKER => { props :: sd_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } TERMINALPUNCTUATIONV1MARKER => { props :: term_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } UNIFIEDIDEOGRAPHV1MARKER => { props :: uideo_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } UPPERCASEV1MARKER => { props :: upper_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } VARIATIONSELECTORV1MARKER => { props :: vs_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } WHITESPACEV1MARKER => { props :: wspace_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } WORDBREAKV1MARKER => { props :: wb_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } XDIGITV1MARKER => { props :: xdigit_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } XIDCONTINUEV1MARKER => { props :: xidc_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } XIDSTARTV1MARKER => { props :: xids_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LOCALEFALLBACKLIKELYSUBTAGSV1MARKER => { fallback :: likelysubtags_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } LOCALEFALLBACKPARENTSV1MARKER => { fallback :: parents_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } METAZONEPERIODV1MARKER => { time_zone :: metazone_period_v1 :: DATA . get_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . copied () . map (AnyPayload :: from_static_ref) } _ => return Err (DataErrorKind :: MissingDataKey . with_req (key , req)) , }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (key , req)) ? , metadata : Default :: default () , }) } }
