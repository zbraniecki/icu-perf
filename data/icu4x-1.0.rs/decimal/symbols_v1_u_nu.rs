// @generated
type DataStruct = < :: icu :: decimal :: provider :: DecimalSymbolsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ; pub static DATA : litemap :: LiteMap < & str , & DataStruct , & [(& str , & DataStruct)] > = litemap :: LiteMap :: from_sorted_store_unchecked (& [("af" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("af-NA" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("agq" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ak" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("am" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ar" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-AE" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-AE-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-BH" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-BH-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-DJ" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-DJ-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-DZ" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-DZ-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-EG" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-EG-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-EH" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-EH-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-ER" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-ER-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-IL" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-IL-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-IQ" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-IQ-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-JO" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-JO-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-KM" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-KM-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-KW" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-KW-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-LB" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-LB-u-nu-latn" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-LY" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-LY-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-MA" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-MA-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-MR" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-MR-u-nu-latn" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-OM" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-OM-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-PS" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-PS-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-QA" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-QA-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-SA" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-SA-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-SD" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-SD-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-SO" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-SO-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-SS" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-SS-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-SY" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-SY-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-TD" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-TD-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-TN" , AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN) , ("ar-TN-u-nu-arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-YE" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("ar-YE-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ar-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("as" , AS_BN_BN_IN) , ("as-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("asa" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ast" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("az" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("az-Cyrl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("az-Latn" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("bas" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("be" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("be-tarask" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("bem" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("bez" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("bg" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("bm" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("bn" , AS_BN_BN_IN) , ("bn-IN" , AS_BN_BN_IN) , ("bn-IN-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("bn-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("bo" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("bo-IN" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("bo-IN-u-nu-tibt" , BO_IN_U_NU_TIBT_BO_U_NU_TIBT) , ("bo-u-nu-tibt" , BO_IN_U_NU_TIBT_BO_U_NU_TIBT) , ("br" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("brx" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("brx-u-nu-deva" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("bs" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("bs-Cyrl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("bs-Latn" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ca" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ca-AD" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ca-ES-valencia" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ca-FR" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ca-IT" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ccp" , CCP_CCP_IN) , ("ccp-IN" , CCP_CCP_IN) , ("ccp-IN-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ccp-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ce" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ceb" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("cgg" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("chr" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ckb" , CKB_CKB_IR) , ("ckb-IR" , CKB_CKB_IR) , ("ckb-IR-u-nu-latn" , CKB_IR_U_NU_LATN_CKB_U_NU_LATN) , ("ckb-u-nu-latn" , CKB_IR_U_NU_LATN_CKB_U_NU_LATN) , ("cs" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("cy" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("da" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("da-GL" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("dav" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("de" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("de-AT" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("de-BE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("de-CH" , DE_CH_DE_LI_EN_CH_IT_CH) , ("de-IT" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("de-LI" , DE_CH_DE_LI_EN_CH_IT_CH) , ("de-LU" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("dje" , DJE_KHQ_MFE_SES_TWQ_XH) , ("doi" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("doi-u-nu-deva" , DOI_U_NU_DEVA_KOK_U_NU_DEVA_MAI_U_NU_DEVA) , ("dsb" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("dua" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("dyo" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("dz" , DZ) , ("dz-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ebu" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ee" , EE_EE_TG) , ("ee-TG" , EE_EE_TG) , ("el" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("el-CY" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-001" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-150" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-AE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-AG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-AI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-AS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-AT" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-AU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BB" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-BI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BW" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-BZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CA" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CH" , DE_CH_DE_LI_EN_CH_IT_CH) , ("en-CK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CX" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-CY" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-DE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-DG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-DK" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-DM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-ER" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-FI" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("en-FJ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-FK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-FM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GB" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GD" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GH" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-GY" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-HK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-IE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-IL" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-IM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-IN" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("en-IO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-JE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-JM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-KE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-KI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-KN" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-KY" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-LC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-LR" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-LS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MH" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MP" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MT" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MV" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MW" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-MY" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NA" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NF" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NL" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-NR" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-NZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PH" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PN" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PR" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-PW" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-RW" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SB" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SD" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SE" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("en-SG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SH" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SI" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("en-SL" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SX" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-SZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TT" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TV" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-TZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-UG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-UM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-VC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-VG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-VI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-VU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-WS" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-ZA" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("en-ZM" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("en-ZW" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("eo" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("es" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("es-419" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-AR" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-BO" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-BR" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-BZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-CL" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-CO" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-CR" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("es-CU" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-DO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-EA" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("es-EC" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-GQ" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("es-GT" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-HN" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-IC" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("es-MX" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-NI" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-PA" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-PE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-PH" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("es-PR" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-PY" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-SV" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-US" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("es-UY" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("es-VE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("et" , ET) , ("eu" , EU_FO_FO_DK_HR_HR_BA_SL) , ("ewo" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("fa" , FA_FA_AF) , ("fa-AF" , FA_FA_AF) , ("fa-AF-u-nu-latn" , FA_AF_U_NU_LATN_FA_U_NU_LATN) , ("fa-u-nu-latn" , FA_AF_U_NU_LATN_FA_U_NU_LATN) , ("ff" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Adlm" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-BF" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-BF-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-CM" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-CM-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-GH" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GH-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-GM" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GM-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-GW" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-GW-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-LR" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-LR-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-MR" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-MR-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-NE" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-NE-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-NG" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-NG-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-SL" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-SL-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-SN" , FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH) , ("ff-Adlm-SN-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Adlm-u-nu-latn" , FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN) , ("ff-Latn" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-BF" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-CM" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-GH" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-GM" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-GN" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-GW" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-LR" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-MR" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-NE" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-NG" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ff-Latn-SL" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("fi" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("fil" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("fo" , EU_FO_FO_DK_HR_HR_BA_SL) , ("fo-DK" , EU_FO_FO_DK_HR_HR_BA_SL) , ("fr" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-BE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-BF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-BI" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-BJ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-BL" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CA" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("fr-CD" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CH" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CI" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-CM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-DJ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-DZ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-GA" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-GF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-GN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-GP" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-GQ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-HT" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-KM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-LU" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("fr-MA" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("fr-MC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-MF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-MG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-ML" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-MQ" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-MR" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-MU" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-NC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-NE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-PF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-PM" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-RE" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-RW" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-SC" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-SN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-SY" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-TD" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-TG" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-TN" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-VU" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-WF" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fr-YT" , FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD) , ("fur" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("fy" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ga" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ga-GB" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("gd" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("gl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("gsw" , GSW_GSW_FR_GSW_LI_RM) , ("gsw-FR" , GSW_GSW_FR_GSW_LI_RM) , ("gsw-LI" , GSW_GSW_FR_GSW_LI_RM) , ("gu" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("gu-u-nu-gujr" , GU_U_NU_GUJR) , ("guz" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("gv" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ha" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ha-GH" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ha-NE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("haw" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("he" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("hi" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("hi-Latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("hi-u-nu-deva" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("hr" , EU_FO_FO_DK_HR_HR_BA_SL) , ("hr-BA" , EU_FO_FO_DK_HR_HR_BA_SL) , ("hsb" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("hu" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("hy" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ia" , ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA) , ("id" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ig" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ii" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("is" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("it" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("it-CH" , DE_CH_DE_LI_EN_CH_IT_CH) , ("it-SM" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("it-VA" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ja" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("jgo" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("jmc" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("jv" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("jv-u-nu-java" , JV_U_NU_JAVA) , ("ka" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("kab" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("kam" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kde" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kea" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("kgp" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("khq" , DJE_KHQ_MFE_SES_TWQ_XH) , ("ki" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kk" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("kkj" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("kl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("kln" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("km" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("km-u-nu-khmr" , KM_U_NU_KHMR) , ("kn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kn-u-nu-knda" , KN_U_NU_KNDA) , ("ko" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ko-KP" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kok" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("kok-u-nu-deva" , DOI_U_NU_DEVA_KOK_U_NU_DEVA_MAI_U_NU_DEVA) , ("ks" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("ks-Arab" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("ks-Arab-u-nu-latn" , KS_ARAB_U_NU_LATN_KS_U_NU_LATN) , ("ks-Deva" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ks-u-nu-latn" , KS_ARAB_U_NU_LATN_KS_U_NU_LATN) , ("ksb" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ksf" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ksh" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("ku" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("kw" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ky" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("lag" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("lb" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("lg" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("lkt" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ln" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ln-AO" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ln-CF" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ln-CG" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("lo" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("lo-u-nu-laoo" , LO_U_NU_LAOO) , ("lrc" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("lrc-IQ" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("lrc-IQ-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("lrc-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("lt" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("lu" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("luo" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("luy" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("lv" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("mai" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mai-u-nu-deva" , DOI_U_NU_DEVA_KOK_U_NU_DEVA_MAI_U_NU_DEVA) , ("mas" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mas-TZ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mer" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mfe" , DJE_KHQ_MFE_SES_TWQ_XH) , ("mg" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mgh" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("mgo" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mi" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mk" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ml" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ml-u-nu-mlym" , ML_U_NU_MLYM) , ("mn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mni" , MNI_MNI_BENG) , ("mni-Beng" , MNI_MNI_BENG) , ("mni-Beng-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mni-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mr" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("mr-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ms" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ms-BN" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ms-ID" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ms-SG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mt" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mua" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("my" , MY) , ("my-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("mzn" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("mzn-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("naq" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("nb" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("nb-SJ" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("nd" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("nds" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("nds-NL" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ne" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("ne-IN" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("ne-IN-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ne-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("nl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-AW" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-BE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-BQ" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-CW" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-SR" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nl-SX" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("nmg" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("nn" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("nnh" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("no" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("nus" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("nyn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("om" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("om-KE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("or" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("or-u-nu-orya" , OR_U_NU_ORYA) , ("os" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("os-RU" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("pa" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("pa-Arab" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("pa-Arab-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("pa-Guru" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("pa-Guru-u-nu-guru" , PA_GURU_U_NU_GURU_PA_U_NU_GURU) , ("pa-u-nu-guru" , PA_GURU_U_NU_GURU_PA_U_NU_GURU) , ("pcm" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("pl" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("ps" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("ps-PK" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("ps-PK-u-nu-latn" , PS_PK_U_NU_LATN_PS_U_NU_LATN_UZ_ARAB_U_NU_LATN) , ("ps-u-nu-latn" , PS_PK_U_NU_LATN_PS_U_NU_LATN_UZ_ARAB_U_NU_LATN) , ("pt" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("pt-AO" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("pt-CH" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-CV" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-GQ" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-GW" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-LU" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-MO" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-MZ" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-PT" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-ST" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("pt-TL" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("qu" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("qu-BO" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("qu-EC" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("rm" , GSW_GSW_FR_GSW_LI_RM) , ("rn" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ro" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ro-MD" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("rof" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ru" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ru-BY" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ru-KG" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ru-KZ" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ru-MD" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ru-UA" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("rw" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("rwk" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sa" , BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN) , ("sa-u-nu-latn" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("sah" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("saq" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sat" , SAT_SAT_OLCK) , ("sat-Olck" , SAT_SAT_OLCK) , ("sat-Olck-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sat-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sbp" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sc" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sd" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("sd-Arab" , AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB) , ("sd-Arab-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sd-Deva" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sd-u-nu-latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("se" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("se-FI" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("se-SE" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("seh" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("ses" , DJE_KHQ_MFE_SES_TWQ_XH) , ("sg" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("shi" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("shi-Latn" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("shi-Tfng" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("si" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sk" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("sl" , EU_FO_FO_DK_HR_HR_BA_SL) , ("smn" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("sn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("so" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("so-DJ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("so-ET" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("so-KE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sq" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("sq-MK" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("sq-XK" , BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV) , ("sr" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Cyrl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Cyrl-BA" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Cyrl-ME" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Cyrl-XK" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Latn" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Latn-BA" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Latn-ME" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sr-Latn-XK" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("su" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("su-Latn" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sv" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("sv-AX" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("sv-FI" , FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE) , ("sw" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sw-CD" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("sw-KE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("sw-UG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ta" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ta-LK" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("ta-LK-u-nu-tamldec" , TA_LK_U_NU_TAMLDEC_TA_MY_U_NU_TAMLDEC) , ("ta-MY" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ta-MY-u-nu-tamldec" , TA_LK_U_NU_TAMLDEC_TA_MY_U_NU_TAMLDEC) , ("ta-SG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ta-SG-u-nu-tamldec" , TA_LK_U_NU_TAMLDEC_TA_MY_U_NU_TAMLDEC) , ("ta-u-nu-tamldec" , TA_LK_U_NU_TAMLDEC_TA_MY_U_NU_TAMLDEC) , ("te" , AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN) , ("te-u-nu-telu" , TE_U_NU_TELU) , ("teo" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("teo-KE" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("tg" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("th" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("th-u-nu-thai" , TH_U_NU_THAI) , ("ti" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ti-ER" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("tk" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("to" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("tr" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("tr-CY" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("tt" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("twq" , DJE_KHQ_MFE_SES_TWQ_XH) , ("tzm" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("ug" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ug-u-nu-arabext" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("uk" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("und" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("ur" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ur-IN" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("ur-IN-u-nu-latn" , AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN) , ("ur-u-nu-arabext" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("uz" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("uz-Arab" , KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS) , ("uz-Arab-u-nu-latn" , PS_PK_U_NU_LATN_PS_U_NU_LATN_UZ_ARAB_U_NU_LATN) , ("uz-Cyrl" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("uz-Latn" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("vai" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("vai-Latn" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("vai-Latn-u-nu-vaii" , VAI_LATN_U_NU_VAII_VAI_VAII_U_NU_VAII) , ("vai-Vaii" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("vai-Vaii-u-nu-vaii" , VAI_LATN_U_NU_VAII_VAI_VAII_U_NU_VAII) , ("vai-u-nu-vaii" , VAI_LATN_U_NU_VAII_VAI_VAII_U_NU_VAII) , ("vi" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("vun" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("wae" , WAE) , ("wo" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("xh" , DJE_KHQ_MFE_SES_TWQ_XH) , ("xog" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yav" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("yi" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yo" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yo-BJ" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yrl" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("yrl-CO" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("yrl-VE" , AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN) , ("yue" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yue-Hans" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yue-Hans-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("yue-Hant" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("yue-Hant-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("yue-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zgh" , AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO) , ("zh" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hans" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hans-HK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hans-HK-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hans-MO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hans-MO-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hans-SG" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hans-SG-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hans-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hant" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hant-HK" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hant-HK-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hant-MO" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB) , ("zh-Hant-MO-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-Hant-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zh-u-nu-hanidec" , YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC) , ("zu" , AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB)]) ; static AF_AF_NA_AGQ_BAS_BR_CS_DE_AT_DUA_DYO : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{a0}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static AK_AM_ASA_BEM_BEZ_BM_BO_BO_IN_CE_CEB : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static AR_AE_AR_BH_U_NU_LATN_AR_DJ_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static AR_AR_AE_U_NU_ARAB_AR_BH_AR_DJ_AR_DZ_U_NU_ARAB : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{61c}-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{61c}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed ("٫") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("٬") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['٠' , '١' , '٢' , '٣' , '٤' , '٥' , '٦' , '٧' , '٨' , '٩' ,] , } ; static AR_DZ_AR_LB_U_NU_LATN_AR_LY_AR_MA_AR_MR_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static AST_AZ_AZ_CYRL_AZ_LATN_BS_BS_CYRL_BS_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static AS_BN_BN_IN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['০' , '১' , '২' , '৩' , '৪' , '৫' , '৬' , '৭' , '৮' , '৯' ,] , } ; static AS_U_NU_LATN_BN_IN_U_NU_LATN_BN_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static BE_BE_TARASK_BG_KA_LV_PL_PT_CH_PT_CV : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{a0}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 2u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static BO_IN_U_NU_TIBT_BO_U_NU_TIBT : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['༠' , '༡' , '༢' , '༣' , '༤' , '༥' , '༦' , '༧' , '༨' , '༩' ,] , } ; static BRX_U_NU_DEVA_HI_U_NU_DEVA_MR_NE_NE_IN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['०' , '१' , '२' , '३' , '४' , '५' , '६' , '७' , '८' , '९' ,] , } ; static CCP_CCP_IN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['𑄶' , '𑄷' , '𑄸' , '𑄹' , '𑄺' , '𑄻' , '𑄼' , '𑄽' , '𑄾' , '𑄿' ,] , } ; static CKB_CKB_IR : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200f}-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200f}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed ("٫") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("٬") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['٠' , '١' , '٢' , '٣' , '٤' , '٥' , '٦' , '٧' , '٨' , '٩' ,] , } ; static CKB_IR_U_NU_LATN_CKB_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static DE_CH_DE_LI_EN_CH_IT_CH : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("’") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static DJE_KHQ_MFE_SES_TWQ_XH : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{a0}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static DOI_U_NU_DEVA_KOK_U_NU_DEVA_MAI_U_NU_DEVA : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['०' , '१' , '२' , '३' , '४' , '५' , '६' , '७' , '८' , '९' ,] , } ; static DZ : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['༠' , '༡' , '༢' , '༣' , '༤' , '༥' , '༦' , '༧' , '༨' , '༩' ,] , } ; static EE_EE_TG : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 3u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static ES_ES_EA_ES_GQ_ES_IC_ES_PH_IA : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 2u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static ET : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{a0}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 2u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static EU_FO_FO_DK_HR_HR_BA_SL : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static FA_AF_U_NU_LATN_FA_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static FA_FA_AF : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed ("٫") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("٬") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['۰' , '۱' , '۲' , '۳' , '۴' , '۵' , '۶' , '۷' , '۸' , '۹' ,] , } ; static FF_ADLM_BF_U_NU_LATN_FF_ADLM_CM_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("⹁") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static FF_ADLM_FF_ADLM_BF_FF_ADLM_CM_FF_ADLM_GH : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("⹁") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['𞥐' , '𞥑' , '𞥒' , '𞥓' , '𞥔' , '𞥕' , '𞥖' , '𞥗' , '𞥘' , '𞥙' ,] , } ; static FI_KSH_LT_NB_NB_SJ_NN_NO_SE_SE_FI_SE_SE : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{a0}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static FR_FR_BE_FR_BF_FR_BI_FR_BJ_FR_BL_FR_CD : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("\u{202f}") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static GSW_GSW_FR_GSW_LI_RM : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("’") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static GU_U_NU_GUJR : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['૦' , '૧' , '૨' , '૩' , '૪' , '૫' , '૬' , '૭' , '૮' , '૯' ,] , } ; static JV_U_NU_JAVA : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['꧐' , '꧑' , '꧒' , '꧓' , '꧔' , '꧕' , '꧖' , '꧗' , '꧘' , '꧙' ,] , } ; static KM_U_NU_KHMR : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['០' , '១' , '២' , '៣' , '៤' , '៥' , '៦' , '៧' , '៨' , '៩' ,] , } ; static KN_U_NU_KNDA : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['೦' , '೧' , '೨' , '೩' , '೪' , '೫' , '೬' , '೭' , '೮' , '೯' ,] , } ; static KS_ARAB_U_NU_LATN_KS_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("،") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static KS_KS_ARAB_LRC_LRC_IQ_MZN_PA_ARAB_PS : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}-\u{200e}") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+\u{200e}") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed ("٫") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("٬") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['۰' , '۱' , '۲' , '۳' , '۴' , '۵' , '۶' , '۷' , '۸' , '۹' ,] , } ; static LO_U_NU_LAOO : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['໐' , '໑' , '໒' , '໓' , '໔' , '໕' , '໖' , '໗' , '໘' , '໙' ,] , } ; static ML_U_NU_MLYM : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['൦' , '൧' , '൨' , '൩' , '൪' , '൫' , '൬' , '൭' , '൮' , '൯' ,] , } ; static MNI_MNI_BENG : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['০' , '১' , '২' , '৩' , '৪' , '৫' , '৬' , '৭' , '৮' , '৯' ,] , } ; static MY : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['၀' , '၁' , '၂' , '၃' , '၄' , '၅' , '၆' , '၇' , '၈' , '၉' ,] , } ; static OR_U_NU_ORYA : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['୦' , '୧' , '୨' , '୩' , '୪' , '୫' , '୬' , '୭' , '୮' , '୯' ,] , } ; static PA_GURU_U_NU_GURU_PA_U_NU_GURU : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['੦' , '੧' , '੨' , '੩' , '੪' , '੫' , '੬' , '੭' , '੮' , '੯' ,] , } ; static PS_PK_U_NU_LATN_PS_U_NU_LATN_UZ_ARAB_U_NU_LATN : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}−") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("\u{200e}+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static SAT_SAT_OLCK : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['᱐' , '᱑' , '᱒' , '᱓' , '᱔' , '᱕' , '᱖' , '᱗' , '᱘' , '᱙' ,] , } ; static TA_LK_U_NU_TAMLDEC_TA_MY_U_NU_TAMLDEC : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 2u8 , min_grouping : 1u8 , } , digits : ['௦' , '௧' , '௨' , '௩' , '௪' , '௫' , '௬' , '௭' , '௮' , '௯' ,] , } ; static TE_U_NU_TELU : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['౦' , '౧' , '౨' , '౩' , '౪' , '౫' , '౬' , '౭' , '౮' , '౯' ,] , } ; static TH_U_NU_THAI : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['๐' , '๑' , '๒' , '๓' , '๔' , '๕' , '๖' , '๗' , '๘' , '๙' ,] , } ; static VAI_LATN_U_NU_VAII_VAI_VAII_U_NU_VAII : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['꘠' , '꘡' , '꘢' , '꘣' , '꘤' , '꘥' , '꘦' , '꘧' , '꘨' , '꘩' ,] , } ; static WAE : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_separator : alloc :: borrow :: Cow :: Borrowed ("’") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,] , } ; static YUE_HANS_U_NU_HANIDEC_YUE_HANT_U_NU_HANIDEC : & DataStruct = & :: icu :: decimal :: provider :: DecimalSymbolsV1 { minus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("-") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , plus_sign_affixes : :: icu :: decimal :: provider :: AffixesV1 { prefix : alloc :: borrow :: Cow :: Borrowed ("+") , suffix : alloc :: borrow :: Cow :: Borrowed ("") , } , decimal_separator : alloc :: borrow :: Cow :: Borrowed (".") , grouping_separator : alloc :: borrow :: Cow :: Borrowed (",") , grouping_sizes : :: icu :: decimal :: provider :: GroupingSizesV1 { primary : 3u8 , secondary : 3u8 , min_grouping : 1u8 , } , digits : ['〇' , '一' , '二' , '三' , '四' , '五' , '六' , '七' , '八' , '九' ,] , } ;
